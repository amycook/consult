ppois(11, lowertail= FALSE)
ppois(11, lower.tail= FALSE)
ppois(q,11, lower.tail= FALSE)
ppois(11,12, lower.tail= FALSE)
ppois(10,12, lower.tail= FALSE)
?pbinom
pbinom(4,15,.8)
pbinom(5,15,.2, lower.tail=FALSE)
rbinom(4,15,.8)
pbinom(4,15,.2, lower.tail=FALSE)
pbinom(4,15,.8, lower.tail=TRUE)
pbinom(5,15,.8, lower.tail=TRUE)
pbinom(5,15,.2, lower.tail=TRUE)
pbinom(4,15,.2, lower.tail=TRUE)
1-Ans
1-.83576
pgeom(5, .2)
pgeom(4, .2)
dgeom(4, .2)
ppois(4,4,lower.tail=TRUE)
pbinom(1,10,0.1,lower.tail=TRUE)
pbinom(1,10,0.1,lower.tail=FALSE)
dgeom(3,.65)
dgeom(2,.65)
?geom
?dgeom
dgeom(2,.35)
2*dgeom(0,.35)*dgeom(2,.35)+dgeom(1,.35)*dgeom(1,.35)
pgeom(1,.35)^2
pgeom(1,.35)
pgeom(1,.35)*pgeom(1,.35)
pgeom(2,.35)*dgeom(0,.35)
?pbinom
pbinom(4,105,.1,lower.tail=TRUE)
pbinom(4,10,.5,lower.tail=TRUE) - pbinom(2,10,.5,lower.tail=TRUE)
pbinom(4,10,.5,lower.tail=TRUE) - pbinom(1,10,.5,lower.tail=TRUE)
dbinom(2,10,.5)
dbinom(1,9,.5)
dbinom(1,9,.5)*dbinom(1,1,.5)
?regex
?regexpr
?sapply
?regexpr
?sapply
?regex
?infix
?regex
ifelse(grepl('mutiny',df$actor) |
grepl('military',df$actor),
1,df$actor)
df<- data.frame('actor'= c("military forces of guinea-bissau",
"mutiny of military forces of guinea-bissau" ,
"unidentified armed group (guinea-bissau)" ,
"mfdc: movement of democratic forces of casamance"),
'country'=c(rep("guinea-bissau",4)))
df
df$actor<- as.character(df$actor)
ifelse(grepl('mutiny',df$actor) |
grepl('military',df$actor),
1,df$actor)
ifelse(grepl('mutiny'|'military',df$actor),
1,df$actor)
ifelse(grepl('mutiny|military',df$actor),
1,df$actor)
ifelse(grepl('mutiny|military',df$actor),
1,df$country)
df$country
ifelse(grepl('mutiny|military',df$actor),
1, 0)
ifelse(grepl('mutiny|military',df$actor),
1, df$country)
ifelse(grepl('mutiny|military',df$actor),
1, wot)
ifelse(grepl('mutiny|military',df$actor),
1, 'wot')
df$country<- as.character(df$country)
ifelse(grepl('mutiny|military',df$actor),
1, df$country)
paste(c(mutiny,military),collapse="|"
)
paste(c("mutiny","military"),collapse="|")
ifelse(grepl(paste(c("mutiny","military"),collapse="|"),df$actor),
1, df$country)
library('rpart')
head(mtcars)
rpart(mpg~., data=mtcars)
library('rpart.plot')
a<- rpart(mpg~., data=mtcars)
prp(a)
?rpart
a<- rpart(mpg~., data=mtcars, rpart.control(cp=0.001))
a<- rpart(mpg~., data=mtcars, control = rpart.control(cp=0.001))
a
prp(a)
a<- rpart(mpg~., data=mtcars, control = rpart.control(cp=0.0001))
a
prp(a)
a<- rpart(mpg~., data=mtcars, control = rpart.control(cp=0.00001))
prp(a)
adult<- read.csv('/Users/yam/OneDrive/shared files/honours_course/trees/adult.csv')
head(adult)
a<- rpart(class~., data=adult, control = rpart.control(cp=0.01))
prp(a)
a<- rpart(class~age + race + gender + hrs.per.week, data=adult, control = rpart.control(cp=0.01))
prp(a)
cp.table(a)
cptable(a)
printcp(a)
state$last_plot_south <= input$plot_bounds$south &&
shiny::runApp('Documents/github/leafier/leaflet_test')
?llply
setwd("~/Documents/github/consult/finalwriteup/report_data")
cfor.varimp = readRDS("cfor_blend_varimp.rds")
getwd()
cfor.varimp = readRDS("/cfor_blend_varimp.rds")
cfor.varimp = readRDS("./cfor_blend_varimp.rds")
opts_knit$set(root.dir= '~/Documents/github/consult/finalwriteup/report_data')
library('knitr')
library('ggplot2')
library("plyr")
library("dplyr")
library('magrittr')
library('reshape2')
library("rpart")
library('car')
library('e1071')
library('party')
library('randomForest')
library('RColorBrewer')
library('pwr')
opts_knit$set(root.dir= '~/Documents/github/consult/finalwriteup/report_data')
cfor.varimp = readRDS("./cfor_blend_varimp.rds")
cfor.varimp = readRDS("report_data/cfor_blend_varimp.rds")
ggplot(data=cfor.varimp, aes(x=var, y=imp)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "Cforest variable importance: blend")
log.varimp = readRDS("report_data/logblend.rds")
summary(log.varimp)
str(log.varimp)
log.varimp$coefficients
str(summary(log.varimp))
summary(log.varimp)$coefficients
summary(log.varimp)$coefficients %>% class
summary(log.varimp)$coefficients %>% filter(Pr(>|z|) <0.05)
summary(log.varimp)$coefficients %>% filter_("Pr(>|z|)" <0.05)
summary(log.varimp)$coefficients %>% as.data.frame %>% head
log.varimp = summary(log.varimp)$coefficients %>% as.data.frame
log.varimp = rename(log.varimp, P_value = Pr(>|z|))
colnames(log.varimp)[names(log.varimp) %in% 'Pr(>|z|)']<-'P_value'
colnames(log.varimp)
log.varimp %>% filter(P_value <= 0.05)
head(log.varimp)
log.varimp = add_rownames(log.varimp)
log.varimp
log.varimp %>% filter(P_value <= 0.05) %>% select(rowname, Estimate, P_value)
log.varimp %>% filter(P_value <= 0.05) %>% select(rowname, Estimate, P_value) %>%
arrange(P_value)
log.varimp = log.varimp %>% filter(P_value <= 0.05) %>% select(rowname, Estimate, P_value) %>%
arrange(P_value)
ggplot(data=log.varimp, aes(x=rowname, y=P_value)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "LogReg variable importance: blend")
log.varimp$rowname <- factor(log.varimp$rowname,
levels= log.varimp$rowname)
ggplot(data=log.varimp, aes(x=rowname, y=P_value)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "LogReg variable importance: blend")
rf.varimp = readRDS("report_data/rfblend.rds")
rf.varimp = readRDS("report_data/rfblend.rds")
importance(rf.varimp, type = 1)
importance(rf.varimp, type = 1) %>% class
rf.varimp = importance(rf.varimp, type = 1) %>% as.data.frame
rf.varimp
rf.varimp = importance(rf.varimp, type = 1) %>% as.data.frame
rf.varimp = readRDS("report_data/rfblend.rds")
rf.varimp = readRDS("report_data/rfblend.rds")
rf.varimp = readRDS("report_data/rfblend.rds")
rf.varimp = importance(rf.varimp, type = 1) %>% as.data.frame
rf.varimp
rf.varimp = add_rownames(log.varimp)
rf.varimp
rf.varimp = readRDS("report_data/rfblend.rds")
rf.varimp = importance(rf.varimp, type = 1) %>% as.data.frame
rf.varimp = add_rownames(rf.varimp)
rf.varimp
rf.varimp = add_rownames(rf.varimp) %>% arrange(MeanDecreaseAccuracy)
rf.varimp = importance(rf.varimp, type = 1) %>% as.data.frame
rf.varimp = readRDS("report_data/rfblend.rds")
rf.varimp = importance(rf.varimp, type = 1) %>% as.data.frame
rf.varimp = add_rownames(rf.varimp) %>% arrange(MeanDecreaseAccuracy)
rf.varimp
rf.varimp$rowname <- factor(rf.varimp$rowname,
levels= rf.varimp$rowname)
ggplot(data=rf.varimp, aes(x=rowname, y=MeanDecreaseAccuracy)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "randomForest variable importance: blend")
rf.varimp = add_rownames(rf.varimp) %>% arrange(-MeanDecreaseAccuracy)
# order levels
rf.varimp$rowname <- factor(rf.varimp$rowname,
levels= rf.varimp$rowname)
#plot p values
ggplot(data=rf.varimp, aes(x=rowname, y=MeanDecreaseAccuracy)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "randomForest variable importance: blend")
rf.varimp = arrange(-MeanDecreaseAccuracy)
rf.varimp$rowname <- factor(rf.varimp$rowname,
levels= rf.varimp$rowname)
#plot p values
ggplot(data=rf.varimp, aes(x=rowname, y=MeanDecreaseAccuracy)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "randomForest variable importance: blend")
rf.varimp = readRDS("report_data/rfblend.rds")
rf.varimp = importance(rf.varimp, type = 1) %>% as.data.frame
rf.varimp = add_rownames(rf.varimp)
rf.varimp = arrange(-MeanDecreaseAccuracy)
?arrange
rf.varimp = arrange(desc(MeanDecreaseAccuracy))
rf.varimp$rowname <- factor(rf.varimp$rowname,
levels= rf.varimp$rowname)
#plot p values
ggplot(data=rf.varimp, aes(x=rowname, y=MeanDecreaseAccuracy)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "randomForest variable importance: blend")
rf.varimp
rf.varimp = arrange(rf.varimp, desc(MeanDecreaseAccuracy))
# order levels
rf.varimp$rowname <- factor(rf.varimp$rowname,
levels= rf.varimp$rowname)
#plot p values
ggplot(data=rf.varimp, aes(x=rowname, y=MeanDecreaseAccuracy)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "randomForest variable importance: blend")
boost.varimp = readRDS("report_data/boostblend.rds")
summary(boost.varimp)
summary(boost.varimp, plotit= T)
boost.varimp = readRDS("report_data/boostblend.rds")
summary(boost.varimp, plotit= T)
boost.varimp = readRDS("report_data/boostblend.rds")
boost.varimp = readRDS("report_data/boostblend.rds")
summary(boost.varimp, plotit= T)
boost.varimp = readRDS("report_data/boostblend.rds")
boost.varimp
boost.varimp = add_rownames(boost.varimp)
boost.varimp
boost.varimp$rowname <- factor(boost.varimp$rowname,
levels= boost.varimp$rowname)
ggplot(data=boost.varimp, aes(x=rowname, y=rel.inf)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "Boosted Trees variable importance: blend")
boost.varimp = readRDS("report_data/boostblend.rds")
boost.varimp = add_rownames(boost.varimp)
# order levels
boost.varimp$rowname <- factor(boost.varimp$rowname,
levels= boost.varimp$rowname)
#plot p values
ggplot(data=boost.varimp, aes(x=rowname, y=rel.inf)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(title = "Boosted Trees variable importance: blend")
library('gbm')
library("plyr")
library("dplyr")
library('tidyr')
library('magrittr')
library('reshape2')
library('ggplot2')
library('gbm')
library('caret')
library('pROC')
library('e1071')
library('randomForest')
library('party')
all10mice = read.csv('~/OneDrive/shared files/Bligh Tanner/masters/data/all10mice_May16.csv')
formula.boost <- "b.rpdol ~ b.timespan.cbrt + no.users + b.inv.log + Business + JD.Second + norm.log + norm.rf + norm.boost"
formula.boost <- "b.rpdol ~ norm.log + norm.rf + norm.boost"
formula.boost <- "b.rpdol ~ b.timespan.cbrt + no.users + b.inv.log + Business + JD.Second + norm.log + norm.rf + norm.boost"
formula.sboost <- "b.rpdol ~ norm.log + norm.rf + norm.boost"
## new variables for FWLS and methods
# create f.rpdol
all10mice$f.rpdol <- as.factor(all10mice$b.rpdol)
levels(all10mice$f.rpdol)[levels(all10mice$f.rpdol) == "0"] <- "profit"
levels(all10mice$f.rpdol)[levels(all10mice$f.rpdol) == "1"] <- "loss"
#perform 10-fold cross validation on train set to create complete train set of predictions for each method
full.predict <- function(df = all10mice, method = "log", x.folds = 5, manual.seed = 100){
full.predict <- function(df = all10mice, method = "log", x.folds = 5, manual.seed = 100){
#set up 10 fold cv using caret function
set.seed(manual.seed)
folds <- createFolds(df$f.rpdol, k = x.folds, list = T, returnTrain = F)
#now have folds[[1]] through folds[[10]] list of rows to exclude
#create NULL dataframe with row names from folds
method.pred <- data.frame('rownames' = unlist(folds))
temp.pred = NULL
#define formula
if(method %in% c('log','rf')){
formula <-"f.rpdol ~ Discipline + pc.pro + b.timespan.cbrt + no.users + b.inv.log + client.totinv.log + Business + majority.pos + pc.majpos.log + JD.Second + Billing.Type"
}
if(method == 'boost') {
#no JD.Second
formula <-"b.rpdol ~ Discipline + pc.pro + b.timespan.cbrt + no.users + b.inv.log + client.totinv.log + Business + majority.pos + pc.majpos.log"
}
#loop over each fold, and compile predictions
for (j in 1:length(folds)) {
#turn predictors and response into 'ordered' variables for roc() to work
test<- df[folds[[j]],]
levels(test$f.rpdol) <- c('profit', 'loss')
test$f.rpdol <- ordered(test$f.rpdol)
if(method %in% 'rf'){
fit <- randomForest(as.formula(formula), data = df[-folds[[j]],],
mtry = 4, ntree = 1000)
pred <- predict(fit, test, type = "prob")
pred <- pred[,2]
}
if(method %in% 'log'){
fit<- glm(as.formula(formula),
data = df[-folds[[j]],], family = binomial())
pred <- predict(fit, test,
type = "response")
}
if(method %in% 'boost'){
fit <- gbm(as.formula(formula), data = df[-folds[[j]],],
distribution = "bernoulli", n.trees = 10000,
shrinkage = 0.001, interaction.depth = 5,
n.minobsinnode = 20)
pred <- predict(fit, test, n.tree = 10000, type = "response")
}
temp.pred <- c(temp.pred, pred)
#print j value
cat(j, " ")
}
method.pred[, method] = temp.pred
return(method.pred)
}
pred.log = full.predict(df = all10mice, method = 'log', x.folds = 5, manual.seed = 100)
pred.rf = full.predict(df = all10mice, method = 'rf', x.folds = 5, manual.seed = 100)
pred.boost = full.predict(df = all10mice, method = 'boost', x.folds = 5, manual.seed = 100)
pred.full = Reduce(full_join, list(pred.log, pred.rf, pred.boost))
gather.pred = gather(pred.full, key = method, value = pred.val,
-rownames)
order.rows = gather.pred %>% group_by(rownames) %>%
summarise(mean = mean(pred.val)) %>%
arrange(mean) %>% ungroup
gather.pred$rownames <- factor(gather.pred$rownames,
levels= order.rows$rownames)
all10.blend = full_join(all10mice %>% mutate(rown = 1:nrow(all10mice)), pred.full,
by = c('rown'='rownames'))
all10.blend <- all10.blend %>% select(-rown)
# need to normalise method responses
all10.blend = mutate(all10.blend, norm.log = sign(log) * abs(log)^(1/3))
all10.blend = mutate(all10.blend, norm.rf = rf^0.5)
all10.blend = mutate(all10.blend, norm.boost = log(boost))
set.seed(100)
train = sample_frac(all10.blend, 0.75, replace = FALSE)
test = setdiff(all10.blend, train)
caret.all(method = "boost", df = train, formula = formula.boost, sample.frac = 0.75, seed = 100)
source("/Users/yam/Documents/github/consult/functions.R")
caret.all(method = "boost", df = train, formula = formula.boost, sample.frac = 0.75, seed = 100)
method = "boost"
method = "boost"
df = train
formula = formula.boost
sample.frac = 0.75
seed = 100
set.seed(seed)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
## For the last model:
seeds[[51]] <- sample.int(1000, 1)
train.c = sample_frac(df, sample.frac, replace = FALSE)
test.c = setdiff(df, train.c)
cv.Control <- trainControl(method = "cv",
number = 5,
seeds= seeds
, summaryFunction= twoClassSummary,
classProbs=TRUE
)
Grid <- expand.grid(shrinkage = c(.0005, .001, .005),
n.trees = c(6000,8000,10000),
interaction.depth = c(3),
n.minobsinnode = c(20))
set.seed(2)
gbmFit <- caret::train(as.formula(formula), data= train.c,
method = "gbm", trControl = cv.Control, verbose = FALSE,
bag.fraction = 0.5, tuneGrid = Grid,
metric = 'ROC',
na.action = na.pass)
formula.boost
head(all10.blend)
head(train)
str(train)
train.c$b.rpdol<- as.factor(train.c$b.rpdol)
levels(train.c$b.rpdol)[levels(train.c$b.rpdol)=="0"] <- "profit"
levels(train.c$b.rpdol)[levels(train.c$b.rpdol)=="1"] <- "loss"
Grid <- expand.grid(shrinkage = c(.0005, .001, .005),
n.trees = c(6000,8000,10000),
interaction.depth = c(3),
n.minobsinnode = c(20))
set.seed(2)
gbmFit <- caret::train(as.formula(formula), data= train.c,
method = "gbm", trControl = cv.Control, verbose = FALSE,
bag.fraction = 0.5, tuneGrid = Grid,
metric = 'ROC',
na.action = na.pass)
plot(gbmFit)
Grid <- expand.grid(shrinkage = c(.005),
n.trees = c(6000),
interaction.depth = c(3,4,5,6),
n.minobsinnode = c(10,20,30,40))
set.seed(2)
gbmFit <- caret::train(as.formula(formula), data= train.c,
method = "gbm", trControl = cv.Control, verbose = FALSE,
bag.fraction = 0.5, tuneGrid = Grid,
metric = 'ROC',
na.action = na.pass)
Grid <- expand.grid(shrinkage = c(.0005),
n.trees = c(6000),
interaction.depth = c(3,4,5,6),
n.minobsinnode = c(10,20,30,40))
# , interaction.depth = c(1,2,3,4,5),
# n.minobsinnode = c(10,20,30)
set.seed(2)
gbmFit <- caret::train(as.formula(formula), data= train.c,
method = "gbm", trControl = cv.Control, verbose = FALSE,
bag.fraction = 0.5, tuneGrid = Grid,
metric = 'ROC',
na.action = na.pass)
plot(gbmFit)
