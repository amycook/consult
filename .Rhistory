formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output(df=all8a, no.tests = 2)
no.tests = 2
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
i=1
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(i in 1:length(variables)){
formula = paste(formula, variables[i], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,1]
summary.tests
i
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output(df=all8a, no.tests = 2)
final.output(df=all8a, no.tests = 50)
cats = c('code.client', 'code.contact', 'JD.Second', 'Business')
k=1
test.df$cats[k]
test.df$code.client
cats[k]
test.df[,cats[k]]
dim(test.df)
k=1
cats[k] %in% vars
vars
k=4
cats[k] %in% vars
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
dim(test.df)
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output(df=all8a, no.tests = 5)
results = final.output(df=all8a, no.tests = 50)
results
?group_indices
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
summary.tests[i,3]= nrow(test.df)
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE', 'test.nrow')
return(summary.tests)
}
results = final.output(df=all8a, no.tests = 50)
results
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
results = final.output(df=all8a, no.tests = 100)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
results = final.output(df=all8a, no.tests = 100)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
results = results %>% filter(test.nrow>150)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
ggplot(results, aes(x = random.RMSE - final.RMSE)) + geom_histogram()
?t.test
diff = results$random.RMSE - results$final.RMSE
diff
diff = as.dataframe('diff' = diff)
diff = data.frame('diff' = diff)
diff
ggplot(diff, aes(x =diff)) + geom_histogram()
?t.test
t.test(diff, alternative = "greater", mu = 0)
samp = NA
final.output<- function(df=all8a, no.tests = 50, core = TRUE) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
for(i in 1:no.tests){
if(core == FALSE){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
} else{
variables = c('inv.mlsto.log', 'Discipline', 'timespan.cbrt',
'no.users', 'pc.pro', 'Business')
}
#make reduced dataset with complete cases for all variables we want to use
reduced = df[complete.cases(df[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
summary.tests[i,3]= nrow(test.df)
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE', 'test.nrow')
return(summary.tests)
}
results = final.output(df=all8a, no.tests = 50, core = TRUE)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
diff = results$random.RMSE - results$final.RMSE
diff = data.frame('diff' = diff)
ggplot(diff, aes(x =diff)) + geom_histogram()
t.test(diff, alternative = "greater", mu = 0)
results.core = final.output(df=all8a, no.tests = 50, core = TRUE)
results = final.output(df=all8a, no.tests = 100, core = FALSE)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
diff = results$random.RMSE - results$final.RMSE
diff = data.frame('diff' = diff)
ggplot(diff, aes(x =diff)) + geom_histogram()
t.test(diff, alternative = "greater", mu = 0)
saveRDS(results, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
saveRDS(results.core, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm_core.rds")
head(results)
results$diff = results %>% mutate(random.RMSE - final.RMSE)
head(results)
results = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
head(results)
results$diff = results %>% mutate(diff = random.RMSE - final.RMSE)
head(results)
?mutate
results = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
head(results)
results$diff = results %>% mutate(diff = (random.RMSE - final.RMSE))
results = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
results = results %>% mutate(diff = random.RMSE - final.RMSE)
head(results)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
ggplot(results, aes(x =diff)) + geom_histogram()
results = results %>% filter(diff>-25)
ggplot(results, aes(x =diff)) + geom_histogram()
results.core = results.core %>% mutate(diff = random.RMSE - final.RMSE)
head(results.core)
saveRDS(results, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
saveRDS(results.core, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm_core.rds")
results %>% ggplot(., aes(x = test.nrow, y = final.RMSE)) + geom_point()
t_test = t.test(diff, alternative = "greater", mu = 0)
str(t_test)
t_test$p.value
cfor.varimp = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/cfor_varimp.rds")
ggplot(data=cfor.varimp, aes(x=var, y=imp)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(y = "Relative Variable Importance Value", x = "Independent Variables", title = "cForest Variable Importance rankings of Complete Variables")
cfor.varimp = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/cfor_varimp.rds")
ggplot(data=cfor.varimp, aes(x=var, y=imp)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(y = "Relative Variable Importance Value", x = "Independent Variables", title = "cForest Variable Importance rankings of Complete Variables")
dim(all8a)
dim(complete.cases(all8a))
complete.cases(iris) %>% dim
?complete.cases
complete.cases(iris)
all8a[complete.cases(all8a),] %>% dim
354/nrow(all8a)
