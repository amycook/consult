shiny::runApp('final_app')
df2
df
shiny::runApp('final_app')
df[1,]
shiny::runApp('final_app')
shiny::runApp('final_app')
?GBM
??gbm
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
rep(0.3,11)
seq(0,100, by = 10)
shiny::runApp('final_app')
shiny::runApp('final_app')
seq(0,100, by = 2.5)
seq(0,100, by = 1)
length(seq(0,100, by = 10))
length(seq(0,100, by = 1))
shiny::runApp('final_app')
df2
df2<- data.frame(id=c(rep("Sp1",1)), ymin= c(63),
ymax=c(79), confidence=c('90%'))
df2 <- within(df2,
confidence <- factor(confidence,
levels=c('90%')))
df2
df2<- data.frame(id=c(rep("Sp1",1)), ymin= c(63), y.mean = c(71)
ymax=c(79), confidence=c('90%'))
df2<- data.frame(id=c(rep("Sp1",1)), ymin= c(63), y.mean = c(71),
ymax=c(79), confidence=c('90%'))
df2 <- within(df2,
confidence <- factor(confidence,
levels=c('90%')))
df2
shiny::runApp('final_app')
shiny::runApp('final_app')
df2
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
install.packages('trelliscope', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages('datadr', lib = 'C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
=======
factor(df[,var], levels= a[order(-a$summ),][,var])
levels= a[order(-a$summ),][,var]
levels
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each Y-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
p
clust.summary
heatmap<- function(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE){
#order var levels by highest amount invoiced total
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
if(percentof_clust== TRUE){
#table with percentages within each category
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each cluster') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
else{
#table with percentages within each cluster
tbl= round(prop.table(table(df[,clust],df[,var]),1)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='Profit measure', y='', title= 'percentage of jobs in each X-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
print(p)
}
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=TRUE)
heatmap<- function(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE){
#order var levels by highest amount invoiced total
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
if(percentof_clust== FALSE){
#table with percentages within each category
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each cluster') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
else{
#table with percentages within each cluster
tbl= round(prop.table(table(df[,clust],df[,var]),1)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='Profit measure', y='', title= 'percentage of jobs in each X-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
print(p)
}
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE)
heatmap<- function(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE){
#order var levels by highest amount invoiced total
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
if(percentof_clust== TRUE){
#table with percentages within each category
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each cluster') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
else{
#table with percentages within each cluster
tbl= round(prop.table(table(df[,clust],df[,var]),1)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='Profit measure', y='', title= 'percentage of jobs in each X-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
print(p)
}
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE)
heatmap<- function(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE){
#order var levels by highest amount invoiced total
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
if(percentof_clust== FALSE){
#table with percentages within each category
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each cluster') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
else{
#table with percentages within each cluster
tbl= round(prop.table(table(df[,clust],df[,var]),1)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='Profit measure', y='', title= 'percentage of jobs in each X-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
print(p)
}
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE)
heatmap<- function(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE){
#order var levels by highest amount invoiced total
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
if(percentof_clust== FALSE){
#table with percentages within each category
tbl= round(prop.table(table(df[,clust],df[,var]),1)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each cluster') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
else{
#table with percentages within each cluster
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='Profit measure', y='', title= 'percentage of jobs in each X-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
print(p)
}
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'majority.pos', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'majority.pos', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'Billing.Type', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'Discipline', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.client', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.client', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.contact', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.contact', df=all7c, percentof_clust=TRUE)
clust.summary
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages('extrafont')
library('extrafont')
source('~/.active-rstudio-document', echo=TRUE)
?loadfonts
loadfonts(device='win')
loadfonts(device='pdf')
source('~/.active-rstudio-document', echo=TRUE)
p= ggplot(sub10 %>% filter(variable == 'pc.seniorpro', Discipline == 'Structural'), aes(x=percent.hrs, y= return.cut, colour= 'blue')) +
geom_smooth(method=loess, se=TRUE, aes(fill='blue'), alpha=.35) +
#                                 stat_summary(fun.x= mean, geom='point', shape = 2) +
#stat_summary(fun.data= mean_sdl, geom='crossbar', mult =1) +
theme(legend.position="none",
axis.text.x=element_text(angle=45,hjust=1),
text=element_text(size=12) ,
plot.title = element_text(size=11, family= 'Times New Roman', face='plain'),
axis.title.y = element_text(size = 9, family= 'Times New Roman'),
axis.title.x = element_text(size=9, family= 'Times New Roman'),
axis.text = element_text(size = 7.5),
panel.background = element_rect(fill = "gray96"),
panel.grid.major = element_line(colour='white' ),
axis.ticks= element_line( colour='gray85')
) +
scale_x_continuous(breaks = seq(0, 100, by = 10), limits=c(0,100)) +
scale_y_continuous(breaks = seq(1, 10, by = 1), limits=c(1,10)) +
# facet_wrap(~ variable) + , labeller =  label_value(variable, c('a','b','c','d','e','f','g','h')) +
geom_point(aes(colour = 'blue'), alpha = 0.5) +
theme(strip.text = element_text(colour = 'white'), strip.background = element_rect(fill = 'black')) +
labs(x = '% Contribution by hours of Senior Professional',
y = 'Return per Dollar Category', title=
'Senior Professional % Contribution vs Return Category')
p
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
p= ggplot(sub10 %>% filter(variable == 'pc.seniorpro', Discipline == 'Structural'), aes(x=percent.hrs, y= return.cut, colour= 'blue')) +
geom_smooth(method=loess, se=TRUE, aes(fill='blue'), alpha=.35) +
#                                 stat_summary(fun.x= mean, geom='point', shape = 2) +
#stat_summary(fun.data= mean_sdl, geom='crossbar', mult =1) +
theme(legend.position="none",
axis.text.x=element_text(angle=45,hjust=1),
text=element_text(size=12) ,
plot.title = element_text(size=12, family= 'Times New Roman', face='plain'),
axis.title.y = element_text(size = 10, family= 'Times New Roman'),
axis.title.x = element_text(size=10, family= 'Times New Roman'),
axis.text = element_text(size = 8.5),
panel.background = element_rect(fill = "gray96"),
panel.grid.major = element_line(colour='white' ),
axis.ticks= element_line( colour='gray85')
) +
scale_x_continuous(breaks = seq(0, 100, by = 10), limits=c(0,100)) +
scale_y_continuous(breaks = seq(1, 10, by = 1), limits=c(1,10)) +
# facet_wrap(~ variable) + , labeller =  label_value(variable, c('a','b','c','d','e','f','g','h')) +
geom_point(aes(colour = 'blue'), alpha = 0.5) +
theme(strip.text = element_text(colour = 'white'), strip.background = element_rect(fill = 'black')) +
labs(x = '% Contribution by hours of Senior Professional',
y = 'Return per Dollar Category', title=
'Senior Professional % Contribution vs Return Category')
p
p= ggplot(sub10 %>% filter(variable == 'pc.seniorpro', Discipline == 'Structural'), aes(x=percent.hrs, y= return.cut, colour= 'blue')) +
geom_smooth(method=loess, se=TRUE, aes(fill='blue'), alpha=.35) +
#                                 stat_summary(fun.x= mean, geom='point', shape = 2) +
#stat_summary(fun.data= mean_sdl, geom='crossbar', mult =1) +
theme(legend.position="none",
axis.text.x=element_text(angle=45,hjust=1),
text=element_text(size=12) ,
plot.title = element_text(size=13, family= 'Times New Roman', face='plain'),
axis.title.y = element_text(size = 11, family= 'Times New Roman'),
axis.title.x = element_text(size=11, family= 'Times New Roman'),
axis.text = element_text(size = 8.5),
panel.background = element_rect(fill = "gray96"),
panel.grid.major = element_line(colour='white' ),
axis.ticks= element_line( colour='gray85')
) +
scale_x_continuous(breaks = seq(0, 100, by = 10), limits=c(0,100)) +
scale_y_continuous(breaks = seq(1, 10, by = 1), limits=c(1,10)) +
# facet_wrap(~ variable) + , labeller =  label_value(variable, c('a','b','c','d','e','f','g','h')) +
geom_point(aes(colour = 'blue'), alpha = 0.5) +
theme(strip.text = element_text(colour = 'white'), strip.background = element_rect(fill = 'black')) +
labs(x = '% Contribution by hours of Senior Professional',
y = 'Return per Dollar Category', title=
'Senior Professional % Contribution vs Return Category')
p
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
?update.packages
update.packages(lib.loc = 'C:/Progra~1/R/R-3.2.3/library',
checkBuilt=TRUE, ask=FALSE)
library('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
update.packages(lib.loc = 'C:/Progra~1/R/R-3.2.3/library',
instlib = 'C:/Progra~1/R/R-3.2.3/library',
checkBuilt=TRUE, ask=FALSE)
library('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages("ggplot2", lib = "C:/Progra~1/R/R-3.2.3/library")
library('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('tidyr', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages('tidyr', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('tidyr', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('Rcpp', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('rmarkdown',lib='C:/Progra~1/R/R-3.2.3/library')
ggplot(mpg, aes(cty, hwy)) +
geom_point()
ggplot(mpg, aes(cty, hwy)) +
geom_count()
library('ggplot2')
head(iris)
summary(iris)
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point()
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
labs(x = "petaltal length", y = 'petaltal width')
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions')
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions')
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
geom_line()
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
geom_line() +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
geom_line(aes(colour = Species)) +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
head(faithfuld)
?faithfuld
??faithfuld
ggplot(faithful) +
geom_tile(aes(waiting, eruptions, fill = density))
head(faithful)
head(faithful)
str(faithful)
library('corrgram')
?mosaicplot
library('party', lib = 'C:/Progra~1/R/R-3.2.1/library')
library('party')
?cforest
table(iris$Species)
table(iris$Species) %>% class
library('magrittr')
table(iris$Species) %>% class
library('ggplot2')
head(diamonds)
diamonds2 <- diamonds %>% slice(1:300)
library('magrittr')
library('dplyr')
diamonds2 <- diamonds %>% slice(1:300)
summary(diamonds2)
summary(diamonds2)
View(diamonds2)
ggplot(data = diamonds2, aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
library('FNN')
?knn
summary(dimaonds)
summary(diamonds)
?ggplot
ggplot(data = diamonds, aes(x = carat, y = price, colour = cut)) +
geom_point()
nrow(diamonds)
?sample
diamonds2 <- diamonds %>% slice(sample(1000, 1:53940))
dim(diamonds)
dim(diamonds2)
?sample
diamonds2 <- diamonds %>% slice(sample( 1:53940, 1000))
dim(diamonds2)
ggplot(data = diamonds2, aes(x = carat, y = price, colour = cut)) +
geom_point()
ggplot(data = diamonds2, aes(x = carat, y = price, colour = clarity)) +
geom_point()
ggplot(data = diamonds2, aes(x = carat, y = price, fill = clarity)) +
geom_bar(stat = 'bin')
ggplot(data = diamonds2, aes(x = carat, fill = clarity)) +
geom_bar(stat = 'bin')
ggplot(data = diamonds2, aes(x = carat, fill = clarity)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = carat, y= price, fill = clarity)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = carat, y= price)) +
geom_boxplot()
summary(diamonds)
str(diamonds)
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter()
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = clarity, y= price, colour = clarity)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = carat, y= price, colour = clarity)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity)) +
geom_point(alpha = 0.5)
summary(diamonds)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = carat)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = cut)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = cut)) +
geom_point(alpha = 0.5) +
scale_colour_brewer(palette = "Greens")
max(diamonds$price)
diamonds %>% filter(carat < 1, cut %in% c('Premium', 'Ideal')) %>% summary
library('shiny')
runApp('~/OneDrive/shared files/Statslearningcourse/Shiny/tutorial/trial1')
runApp('~/OneDrive/shared files/Statslearningcourse/Shiny/tutorial/trial1')
head(diamonds)
ggplot(diamonds, aes(x = carat, y = price, colour = depth)) +
geom_point() +
facet_wrap(~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point() +
facet_wrap(~color)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_tile(aes(fill = color))
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_tile(aes(fill = color))
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_tile(aes(fill = price))
head(diamonds)
ggplot(diamonds, aes(x = carat, y = clarity)) +
geom_tile(aes(fill = price))
?diamonds
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_point(aes(colour = depth)) +
facet_wrap(~color) +
geom_smooth()
temp <- c(11, 18, 15, 25, 16, 12, 32, 24,28,14)
mean(temp)
sd(temp)
order(temp)
sort(temp)
sd(temp)
(11-19.5)^2
x = temp - 19.5
x
x^2
18-19.5^2
18-19.5
-15^2
-1.5^2
sum(x^2)
temp <-sort(temp)
x = temp - 19.5
x
x^2
18-19.5
-1.5^2
sd(temp)
temp
temp <- c(11, 18, 15, 25, 16, 12, 82, 24,28,14)
mean(temp)
temp <-sort(temp)
>>>>>>> Stashed changes
