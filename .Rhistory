n.minobsinnode = 20)
pred.c <- predict(check.fit, test, n.tree = 6000, type = "response")
}
#assign fit to global
assign("fit", fit, envir = .GlobalEnv)
saveRDS(fit, paste("/Users/yam/Documents/github/consult/finalwriteup/report_data/",
method,"blend.rds", sep = ""))
#pROC
pred.p <- pROC::roc(test$f.rpdol, pred)
pROC::plot.roc(pred.p, col = "red", print.thres = F)
print(pROC::auc(pred.p))
#print check
pred.pc <- pROC::roc(test$f.rpdol, pred.c)
pROC::plot.roc(pred.pc, col = "blue", add = TRUE , print.thres = F)
#print AUC's
print(
c("blend" = pROC::auc(pred.p), "check" = pROC::auc(pred.pc))
)
}
formula.log <- "f.rpdol ~ b.timespan.cbrt + no.users + b.inv.log + Business + JD.Second + norm.log + norm.rf + norm.boost"
formula.rf <- "f.rpdol ~ b.timespan.cbrt + no.users + b.inv.log + Business + JD.Second + norm.log + norm.rf + norm.boost"
formula.boost <- "b.rpdol ~ b.timespan.cbrt + no.users + b.inv.log + Business + JD.Second + norm.log + norm.rf + norm.boost"
formula.sboost <- "b.rpdol ~ norm.log + norm.rf + norm.boost"
metafeatures = strsplit(formula.log, split = c("\\s\\~\\s|\\s\\+\\s"))[[1]]
methods = metafeatures[7:9]
metafeatures = metafeatures[2:6]
for(j in seq_along(methods)){
for(m in seq_along(metafeatures)){
formula.log <- paste(formula.log, " + ", metafeatures[m], "*", methods[j], sep = "")
}
}
iter.auc <- function(mult = 4, x.folds = 5,
methods = c("orig.log","log","rf","boost","average",
"simp.log","simp.boost"),
seedy = 100, df = all10.blend) {
#create test and train set: 0.75/0.25
set.seed(seedy)
auc <- rep(list(rep(0, mult*x.folds)), length(methods))
names(auc) = methods
#create model averaged column
df = mutate(df, model.av = (log + rf +boost)/3)
#set up 10 fold cv using caret function
folds <- createFolds(df$f.rpdol, k = x.folds, list = T, returnTrain = F)
#now have folds[[1]] through folds[[10]] list of rows to exclude
if(mult > 1){
for(k in 2:mult){
set.seed(sample(1:1000,1))
folds.temp = createFolds(df$f.rpdol, k = x.folds, list = T, returnTrain=F)
folds = append(folds, folds.temp)
}
}
for(i in seq_along(folds)){
train = df[-folds[[i]],]
test = df[folds[[i]],]
if ("log" %in% methods) {
print("log")
fit <- glm(as.formula(formula.log),
data = train,
family = binomial())
pred <- predict(fit, test, type = "response")
auc[["log"]][i] <- pROC::roc(test$f.rpdol, pred) %>% auc() %>% round(3)
}
if ("simp.log" %in% methods) {
print("simp.log")
fit <- glm(f.rpdol ~ log + rf + boost,
data = train,
family = binomial())
pred <- predict(fit, test, type = "response")
auc[["simp.log"]][i] <- pROC::roc(test$f.rpdol, pred) %>% auc() %>% round(3)
}
if ("rf" %in% methods) {
print("rf")
fit <- randomForest( as.formula(formula.rf), data = train,
mtry = 3, ntree = 1000, importance = TRUE
)
pred <- predict(fit, test, type = "prob")
pred <- pred[, 2]
auc[["rf"]][i] <- pROC::roc(test$f.rpdol, pred) %>% auc() %>% round(3)
}
if ("simp.boost" %in% methods) {
print("simp.boost")
fit <- gbm(b.rpdol ~ norm.log + norm.rf + norm.boost, data = train,
distribution = "bernoulli", n.trees = 6000,
shrinkage = 0.0005, interaction.depth = 6,
n.minobsinnode = 10)
pred <- predict(fit, test, n.tree = 6000, type = "response")
auc[["simp.boost"]][i] <- pROC::roc(test$f.rpdol, pred) %>% auc() %>% round(3)
}
if ("boost" %in% methods) {
print("boost")
fit <- gbm(as.formula(formula.boost), data = train,
distribution = "bernoulli", n.trees = 6000,
shrinkage = 0.0005, interaction.depth = 3,
n.minobsinnode = 10)
pred <- predict(fit, test, n.tree = 6000, type = "response")
auc[["boost"]][i] <- pROC::roc(test$f.rpdol, pred) %>% auc() %>% round(3)
}
if ("orig.log" %in% methods) {
print("orig.log")
pred <- test$log
auc[["orig.log"]][i] <- pROC::roc(test$f.rpdol, pred) %>% auc() %>% round(3)
}
if ("average" %in% methods) {
print("average")
pred <- test$model.av
auc[["average"]][i] <- pROC::roc(test$f.rpdol, pred) %>% auc() %>% round(3)
}
#print AUC's
cat(i, " ")
}
#assign fit to global
assign("auc.list", auc, envir = .GlobalEnv)
# saveRDS(auc, paste("/Users/yam/Documents/github/consult/finalwriteup/report_data/",
#                    "auc_blend_20.rds", sep = ""))
}
head(all10.blend)
iter.auc(mult = 10, x.folds = 10, seedy = 100, df = all10.blend,
methods = c("simp.log"))
simp.log.notrans <- auc.list
simp.log.notrans
auc.list <- readRDS("/Users/yam/Documents/github/consult/finalwriteup/report_data/blend_auc.rds")
auc.list <- readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc.rds")
class(auc.list)
str(auc.list)
?append
p
auc.list <- append(auc.list, "simp.log.notrans" = simp.log.notrans)
auc.list <- append(auc.list, simp.log.notrans)
str(auc.list)
names(auc.list)[[8]] = "simp.log.notrans"
str(auc.list)
ggplot(melt(auc.list), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = L1, colour = L1)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 20 models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression", "average" = "Simple Average",
"orig.log" = "Orignal LogReg", "rf" = "Random Forest"))
auc.list <- readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc.rds")
ggplot(melt(auc.list), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = L1, colour = L1)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 20 models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression", "average" = "Simple Average",
"orig.log" = "Orignal LogReg", "rf" = "Random Forest"))
n.samples = function(data = results.core$diff, type.calc = 'one.sample', alt = 'greater'){
if(type.calc == "one.sample"){
d.calc = abs(mean(data))/sd(data)
pow_pow = pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05,
power =.8, type = c(type.calc),
alternative = alt)
return(ceiling(pow_pow$n))
}
if(type.calc == 'two.sample'){
d.calc = abs(mean(data[[1]])-mean(data[[2]]))/
(sqrt((sd(data[[1]])^2+sd(data[[2]])^2)/2))
pow_pow = pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05,
power =.8, type = c(type.calc),
alternative = 'two.sided')
return(ceiling(pow_pow$n))
}
}
str(auc.list)
index = c(2:7)
ns = NULL
for(i in seq_along(index)){
temp = n.samples(data = auc.list[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i] = temp
}
library('pwr')
for(i in seq_along(index)){
temp = n.samples(data = auc.list[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i] = temp
}
ns
names(auc.list)[c(2:7)]
ns = data.frame("method" = names(auc.list)[c(2:7)], "n"= NA)
index = c(2:7)
ns = data.frame("method" = names(auc.list)[c(2:7)], "n"= NA)
for(i in seq_along(index)){
temp = n.samples(data = auc.list[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i,2] = temp
}
ns
i = 7
names(auc.list)[index[i]]
index[i]
i=6
index[i]
names(auc.list)[index[i]]
index = c(2:7)
ns = data.frame("method" = names(auc.list)[c(2:7)], "n"= NA)
for(i in seq_along(index)){
temp = n.samples(data = auc.list[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i,2] = temp
ns[i,1] = names(auc.list)[index[i]]
}
ns
iter.auc(mult = 60, x.folds = 5, seedy = 100, df = all10.blend,
methods = c("orig.log","average", "simp.log"))
auc.300 = auc.list
ggplot(melt(auc.300), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = L1, colour = L1)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 20 models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression", "average" = "Simple Average",
"orig.log" = "Orignal LogReg", "rf" = "Random Forest"))
str(auc.300)
index = c(2:3)
ns = data.frame("method" = names(auc.list)[c(2:3)], "n"= NA)
for(i in seq_along(index)){
temp = n.samples(data = auc.list[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i,2] = temp
ns[i,1] = names(auc.list)[index[i]]
}
ns
index = c(2:3)
ns = data.frame("method" = names(auc.list)[c(2:3)], "n"= NA)
for(i in seq_along(index)){
temp = n.samples(data = auc.300[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i,2] = temp
ns[i,1] = names(auc.list)[index[i]]
}
ns
str(auc.300)
index = c(2:3)
pvals = data.frame("method" = names(auc.list)[c(2:3)], 'p_value' = NA)
for(i in seq_along(index)){
pvals$p_value[i] = t.test(auc.300[[1]], auc.300[[index[i]]])$p.value %>%
format(digits = 2) %>% as.numeric
}
pvals
t.test(auc.300[[2]], auc.300[[index[3]]])
?t.test
auc.300[[1]]
i=1
auc.300[[index[i]]]
t.test(auc.300[[1]], auc.300[[index[i]]])
str(auc.300)
t.test(auc.300[[2]], auc.300[[3]])
saveRDS(auc.300, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc300.rds")
iter.auc(mult = 20, x.folds = 5, seedy = 100, df = all10.blend,
methods = c("orig.log","log","average", "boost","rf", "simp.log","simp.boost"))
ggplot(melt(auc.list), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = L1, colour = L1)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 20 models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression", "average" = "Simple Average",
"orig.log" = "Orignal LogReg", "rf" = "Random Forest"))
saveRDS(auc.list, "/Users/yam/Documents/github/consult/finalwriteup/report_data/blend_auc1.rds")
saveRDS(auc.list, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc1.rds")
auc.list <- readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc1.rds")
index = c(2:7)
ns = data.frame("method" = names(auc.list)[c(2:7)], "n"= NA)
for(i in seq_along(index)){
temp = n.samples(data = auc.list[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i,2] = temp
ns[i,1] = names(auc.list)[index[i]]
}
ns
iter.auc(mult = 150, x.folds = 5, seedy = 100, df = all10.blend,
methods = c("orig.log","average", "simp.log"))
iter.auc(mult = 30, x.folds = 5, seedy = 100, df = all10.blend,
methods = c("orig.log","average", "simp.log"))
auc.300 = auc.list
ggplot(melt(auc.300), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = L1, colour = L1)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 20 models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression", "average" = "Simple Average",
"orig.log" = "Orignal LogReg", "rf" = "Random Forest"))
str(auc.300)
auc.150 = auc.list
index = c(2:3)
ns = data.frame("method" = names(auc.list)[c(2:3)], "n"= NA)
for(i in seq_along(index)){
temp = n.samples(data = auc.150[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i,2] = temp
ns[i,1] = names(auc.list)[index[i]]
}
ns
index = c(2:3)
pvals = data.frame("method" = names(auc.list)[c(2:3)], 'p_value' = NA)
for(i in seq_along(index)){
pvals$p_value[i] = t.test(auc.150[[1]], auc.150[[index[i]]])$p.value %>%
format(digits = 2) %>% as.numeric
}
pvals
ns
auc.list <- readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc1.rds")
index = c(2:7)
ns = data.frame("method" = names(auc.list)[c(2:7)], "n"= NA)
for(i in seq_along(index)){
temp = n.samples(data = auc.list[c(1, index[i])], type.calc = 'two.sample', alt = 'two.sided')
ns[i,2] = temp
ns[i,1] = names(auc.list)[index[i]]
}
ns
auc.list <- readRDS("blend_auc1.rds")
ggplot(melt(auc.list), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = L1, colour = L1)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 100 Blended Models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression",
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"rf" = "Random Forest",
"simp.boost" = "Simple Boosted Trees",
"simp.log" = "Simple Logistic Regression"))
cow = data.frame(cow = c('pow', 'wow', 'now', 'plow', 'cow'))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = rainbow(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = terrain.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = topo.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = heat.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = cm.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = heat.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = topo.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = terrain.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = cm.colors(5))
ggplot(cow, aes(x = cow)) + geom_bar(stat = "count", fill = topo.colors(5))
ggplot(melt(auc.list), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = L1, colour = L1)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 100 Blended Models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression",
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"rf" = "Random Forest",
"simp.boost" = "Simple Boosted Trees",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = topo.colors(7),
labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression",
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"rf" = "Random Forest",
"simp.boost" = "Simple Boosted Trees",
"simp.log" = "Simple Logistic Regression"))
mapply(auc.list, mean)
apply(auc.list, mean)
lapply(auc.list, mean)
means = lapply(auc.list, mean) %>% unlist
means
means[means> "orig.log"]
means["orig.log"]
means[means> means["orig.log"]]
means[means> means["orig.log"]] %>% names
auc.melt = melt(auc.list)
head(auc.melt)
auc.melt$greater = ifelse(auc.melt$L1 %in% greater, TRUE, FALSE)
e
greater = means[means> means["orig.log"]] %>% names
auc.melt$greater = ifelse(auc.melt$L1 %in% greater, TRUE, FALSE)
head(auc.melt)
ggplot(melt(auc.list), aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = greater, colour = greater)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 100 Blended Models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression",
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"rf" = "Random Forest",
"simp.boost" = "Simple Boosted Trees",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = c('sienna1','navajowhite'),
name = "Mean AUC greater \nthan Original Logistic Regression")
ggplot(auc.melt, aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = greater, colour = greater)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 100 Blended Models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression",
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"rf" = "Random Forest",
"simp.boost" = "Simple Boosted Trees",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = c('sienna1','navajowhite'),
name = "Mean AUC greater \nthan Original Logistic Regression")
ggplot(auc.melt, aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = greater, colour = greater)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 100 Blended Models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression",
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"rf" = "Random Forest",
"simp.boost" = "Simple Boosted Trees",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC greater \nthan Original Logistic Regression") +
scale_colour_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC greater \nthan Original Logistic Regression")
ggplot(auc.melt, aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = greater, colour = greater)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y="mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 100 Blended Models of each Method") +
scale_x_discrete(labels = c("boost" = "Boosted Trees",
"log" = "Logistic Regression",
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"rf" = "Random Forest",
"simp.boost" = "Simple Boosted Trees",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC greater than \nOriginal Logistic Regression") +
scale_colour_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC greater than \nOriginal Logistic Regression")
ns
saveRDS(auc.150, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc150.rds")
auc.150 = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/blend_auc150.rds")
str(auc.150)
t.test(auc.150[['orig.log']], auc.150[['average']])$p.value %>% format(digits = 2) %>% as.numeric
t.test(auc.150[['orig.log']], auc.150[['simp.log']])$p.value %>% format(digits = 2) %>% as.numeric
index = c(2:3)
pvals = data.frame("method" = names(auc.150)[c(2:3)], 'p_value' = NA)
for(i in seq_along(index)){
pvals$p_value[i] = t.test(auc.150[[1]], auc.150[[index[i]]])$p.value %>%
format(digits = 2) %>% as.numeric
}
pvals
signif = pvals %>% filter(p_value<0.05) %>% .$method
signif
auc.150$signif = ifelse(auc.150$signif %in% signif, TRUE, FALSE)
head(auc.150)
signif = pvals %>% filter(p_value<0.05) %>% .$method
auc.150 = melt(auc.150)
auc.150$signif = ifelse(auc.150$signif %in% signif, TRUE, FALSE)
head(auc.150)
auc.150$signif = ifelse(auc.150$L1 %in% signif, TRUE, FALSE)
head(auc.150)
ggplot(auc.150, aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = signif, colour = signif)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y = "mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 150 Blended Models of Best Methods") +
scale_x_discrete(labels = c(
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC significantly greater than \nOriginal Logistic Regression") +
scale_colour_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC greater significantly than \nOriginal Logistic Regression")
ggplot(auc.150, aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = signif, colour = signif)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y = "mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 150 Blended Models of Best Methods") +
scale_x_discrete(labels = c(
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC significantly greater than \nOriginal Logistic Regression") +
scale_colour_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC significantly greater than \nOriginal Logistic Regression")
ggplot(auc.150, aes(x= factor(L1), y= value)) +
geom_violin(aes(fill = signif, colour = signif)) +
geom_jitter(alpha = 0.2, shape = 16, colour= 'gray70') +
stat_summary(fun.y = "mean", geom="point", colour = "gray60", shape =3) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "Method", y = "Area Under Curve (AUC)",
title = "AUC Distribution from 150 Blended Models of Best Methods") +
scale_x_discrete(labels = c(
"average" = "Simple Average",
"orig.log" = "Orignal Logistic Regression",
"simp.log" = "Simple Logistic Regression")) +
scale_fill_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC significantly \ngreater than Original \nLogistic Regression") +
scale_colour_manual(values = c('navajowhite','sienna1'),
name = "Mean AUC significantly \ngreater than Original \nLogistic Regression")
