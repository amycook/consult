str(all5)
all4e<- read.csv('all4e.csv')[,-1]
str(all4e)
#delete Start.Date, tot.TS.Charge, tot.TS.cost, tot.TS.hours, Year
all4e<- all4e %>% select(-Start.Date, -Tot.TS.Cost, -Tot.TS.Charge, -TS.Hours, -Year, -Profit, -Tot.Invoiced)
#combine Inv.Sum
Inv.sum<- read.csv('inv_sum.csv')[,-1]
all4e<- merge(all4e, Inv.sum %>% select(Job.Number, Tot.Invoiced), by= 'Job.Number', all.x=TRUE, all.y=FALSE)
#set NA = 0
all4e[is.na(all4e$Tot.Invoiced),]$Tot.Invoiced <- 0
#combine Job.Hours
Job.Hours<- read.csv('Job_hours.csv')[,-1]
Job.Hours<- Job.Hours %>% select(-mlsto)
head(Job.Hours)
all5<- merge(all4e, Job.Hours, by.x='Job.Number', by.y= 'Job.num', all.x=TRUE, all.y=FALSE)
str(all5)
#create new 'profit' and 'balance' column
#profit column
all5<- transform(all5, profit= Tot.Invoiced-charge-Dis.subcon)
#balance column - subtract real costs
all5<- transform(all5, balance= Tot.Invoiced-cost-Dis.subcon)
all5<- all5[-c(2068:2070),]
write.csv(all5, 'all5.csv')
all5<- read.csv('all5.csv')[,-1]
#Need to sum up all the profits and balances for jobs with milestones
# first
#create subset of just the things i want to add up - profits, balance, hours in each milestone
temp<- all5 %>% select(Job.Number, hours, profit, balance, cost, Dis.subcon, Tot.Invoiced)
temp$Job.Number<- as.character(temp$Job.Number)
temp1<- temp[1:2426,]
#string split to create another column with the first part of a job number. For the first half of jobs just the first bit indicates it could be invoiced together ie 2002.001 by itself
temp1$mlsto<-sapply(temp1$Job.Number,FUN=function(x){
paste(strsplit(x,split='[.]')[[1]][1], strsplit(x,split='[.]')[[1]][2], sep=".")})
#Then ddply using this shortened job number to group. Add up all balance, profit hours in shortened job number. MErge back with original data set.
temp1<- merge(temp1, ddply(temp1, .(mlsto), summarise, profit.mlsto= sum(profit), balance.mlsto = sum(balance), hrs.mlsto = sum(hours), cost.mlsto=sum(cost),
dis.sc.mlsto = sum(Dis.subcon),  inv.mlsto=sum(Tot.Invoiced)),
by.x= 'mlsto', by.y= 'mlsto', all.x=TRUE, all.y=FALSE)
#do the same with second half of data
temp2<- temp[2427:4169,]
temp2$mlsto<-sapply(temp2$Job.Number,FUN=function(x){
substr(x,1,10)})
temp2$mlsto<- ifelse(temp2$mlsto == '2011.072.3', temp2$Job.Number, temp2$mlsto)
temp2<- merge(temp2, ddply(temp2, .(mlsto), summarise, profit.mlsto= sum(profit), balance.mlsto = sum(balance), hrs.mlsto = sum(hours), cost.mlsto=sum(cost),
dis.sc.mlsto= sum(Dis.subcon), inv.mlsto=sum(Tot.Invoiced)),
by.x= 'mlsto', by.y= 'mlsto', all.x=TRUE, all.y=FALSE)
#rbind temp1 and temp2 together.
temp<- rbind(temp1, temp2)
dim(temp)
all5<- merge(all5, temp[,names(temp) %in% c('mlsto','Job.Number','profit.mlsto','balance.mlsto','hrs.mlsto','cost.mlsto','dis.sc.mlsto', 'inv.mlsto')],
by='Job.Number')
all5 <- transform(all5, return.pdol= balance.mlsto/(cost.mlsto+dis.sc.mlsto))
all5 <- transform(all5, inv.vs.cost= inv.mlsto/(cost.mlsto+dis.sc.mlsto))
str(all5)
all5 %>% filter(mlsto == '2008.211') %>% select(pc.director)
Job.Hours %>% filter(mlsto == '2008.211') %>% select(pc.director)
hours1 %>% filter(mlsto == '2008.211') %>% select(pc.director)
head(hours1)
dim(all5)
all5<- write.csv(all5, 'all5a.csv')
all5a<-read.csv('all5a.csv')[,-1]
all5a<- all5a[!(names(all5a) %in% c('Job.Name', 'Opportunity', 'Client.Company','Job.Address',
'Suburb'))]
#substitute all the codes in
#client2
code.client2<- read.csv('Code_client2.csv')
all5a<- merge(all5a, code.client2[,2:3], by= 'client2', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.client'
#sub in client contact
code.contact<- read.csv('code_contact.csv')
all5a<- merge(all5a, code.contact[,2:3], by.x= 'Client.Contact', by.y= 'contact', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.contact'
#sub in job number
code.job<- read.csv('code_job.csv')[,-1]
all5a<- merge(all5a, code.job, by.x= 'Job.Number', by.y= 'job1', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code2']<-'code.jobnum'
#code users into.. 'Director', 'Project.Engineer', 'Engineer.2'
code.staff<- read.csv('code_users2.csv')[,-c(1,5)]
all5a<- merge(all5a, code.staff, by.x= 'Director', by.y= 'User', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.director'
all5a<- all5a[,!(names(all5a) %in% 'Position')]
all5a<- merge(all5a, code.staff, by.x= 'Project.Engineer', by.y= 'User', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.ProjEng'
colnames(all5a)[names(all5a) %in% 'Position']<-'ProjEng.Pos'
all5a<- merge(all5a, code.staff, by.x= 'Engineer.2', by.y= 'User', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.Eng2'
colnames(all5a)[names(all5a) %in% 'Position']<-'Eng2.Pos'
#delete columns - Director, Project.Engineer, Engineer.2
all5a<- all5a[,!(names(all5a) %in% c('Director', 'Project.Engineer', 'Engineer.2'))]
#investigate Parent.Job
invest<- all5a[!(is.na(all5a$Parent.Job)),(names(all5a) %in% c('Parent.Job', 'Job.Number'))]
#just delete Parent.Job - milestones tell you the same thing
all5a<- all5a[,!(names(all5a) %in% c('client2', 'Job.Number', 'Client.Contact', 'Parent.Job', 'caredfor'))]
all5a<- arrange(all5a, Start.Date)
dim(all5a)
write.csv(all5a, 'all6.csv')
all6<- read.csv('all6.csv')[,-1]
inv.eng<- read.csv('invoices_eng.csv')[,-1]
all6a<- merge(all6, inv.eng %>% select(code.jobnum, num.inv, mean.inv, Inv.freq, num.neginv), by='code.jobnum', all.x=T)
all6a<- merge(all6a, inv.eng %>% select(code.client, client.meaninv, client.invfreq, client.neginv, client.numinv, client.totinv) %>% unique,
by='code.client', all.x=T)
dim(all6a)
str(all6a)
write.csv(all6a,'all6a.csv')
dup<- all6a[,names(all6a) %in% c('mlsto')]
all7<-all6a[!(all6a$Tot.Invoiced==0 | duplicated(dup)),]
dim(all7a)
dim(all7)
dim(all6a)
dup<- all6a[,names(all6a) %in% c('mlsto')]
all7<-all6a[!(all6a$Tot.Invoiced==0 | duplicated(dup)),]
dim(all7)
all7<- read.csv('all7.csv')[,-1]
dim(all7)
all7<-all6a[!(all6a$inv.mlsto==0 | duplicated(dup)),]
dim(all7)
write.csv(all7, 'all7.csv')
all7$Start.Date<- as.Date(all7$Start.Date)
test<- all7 %>% filter(return.pdol <=3 & return.pdol> -2)
qqPlot(test$return.pdol)
qqPlot(log(test$return.pdol+.97))
skewness(test$return.pdol)
skewness(log(test$return.pdol+.97))
kurtosis(test$return.pdol)
all7a<- all7 %>% filter(return.pdol <=3 & return.pdol> -2)
dim(all7a)
all7a<- all7 %>% select(-Paperless,-Innovation, -JobInvCount,-job.first.inv.email.Sent,
-Total.Costs..AUD., -Stage, -Folders, -Total.Fee, -Disburse, -Subcon.fee,
-Job.Size, -Tot.Invoiced, -charge, -cost, -Dis.subcon, -hours,-profit,-balance,
-Role)
all7b<- all7a
all7b[is.na(all7b$State),]$State <- 'QLD'
all7b %>% filter(is.na(Business)) %>% select(mlsto, inv.mlsto)
all5a %>% filter(is.na(Business)) %>% select(mlsto, inv.mlsto)
all5a %>% filter(is.na(Business)) %>% select(mlsto, inv.mlsto, clien2)
all5a %>% filter(is.na(Business)) %>% select(mlsto, inv.mlsto, client2)
str(all5a)
all5 %>% filter(is.na(Business)) %>% select(mlsto, inv.mlsto, client2)
all5 %>% filter(is.na(Business))
str(all5)
all5 <- read.csv('all5.csv')
all5 %>% filter(is.na(Business)) %>% select(mlsto, inv.mlsto, client2)
all5 %>% filter(is.na(Business)) %>% select(client2)
summary(all7b$Business)
all7b[all7b$code.client %in% 'C2835',]$no.employees <- 1001
all7b[all7b$code.client %in% 'C2835',]$Biz.type <- 'NFP'
all7b[all7b$code.client %in% 'C2835',]$Business <- 'developer/real estate'
all7b[all7b$code.client %in% 'C2758',]$Biz.size <- 'national'
all7b[all7b$code.client %in% 'C2758',]$no.employees <- 2
all7b[all7b$code.client %in% 'C2758',]$Biz.size <- 'local'
all7b[all7b$code.client %in% 'C2758',]$Business <- 'business'
all7b[all7b$code.client %in% 'C2326',]$Business <- 'health'
all7b[all7b$code.client %in% 'C2338',]$Biz.size <- 'local'
all7b[all7b$code.client %in% 'C2338',]$Business <- 'developer/real estate'
all7b[all7b$code.client %in% 'C2338',]$Biz.type <- 'private'
all7b[all7b$code.client %in% 'C2882',]$Biz.size <- 'local'
all7b[all7b$code.client %in% 'C2882',]$Business <- 'builder'
all7b[all7b$code.client %in% 'C2882',]$Biz.type <- 'private'
all7b[all7b$code.client %in% 'C2882',]$no.employees <- 3
summary(all7b%Business)
summary(all7b$Business)
all7b$Business<- as.character(all7b$Business)
all7b[is.na(all7b$Business),]$Business <- 'unknown'
all7b$Business<- as.factor(all7b$Business)
summary(all7b$Business)
all7b[is.na(all7b$Biz.size),]$Biz.size <- 'local'
#impute Biz.type to be 'private' by default - this is most popular category
#client which is 'department of national parks' shall be 'gov'
all7b[is.na(all7b$Biz.type),]$Biz.type <- 'private'
all7b[all7b$code.client %in% 'C2503',]$Biz.type <- 'gov'
#delete charge.ph and charge.pc, Start.Date and End.Date
all7b<- all7b %>% select(-charge.ph, -charge.pc, -Start.Date, -End.Date)
#impute NA no.users as 2 = median and mode
all7b[is.na(all7b$no.users),]$no.users <- 2
#impute NA num.disc as 1 - overwhelmingly the most common
all7b[is.na(all7b$Num.disc),]$Num.disc <- 1
#num.inv and mean.inv both have a single NA value
# this consisted of single large -ve invoice. I think we should delete this case
all7b %>% filter(is.na(num.inv))
all7b %>% select(Tot.Invoiced) %>% head
str(all7b)
head(inv.eng)
summary(inv.eng$num.inv)
str(all5a)
all5a$client2 %>% head
all5<- read.csv('all5.csv')
all5 %>% select(client2) %>% head
all5a <- read.csv('all5a.csv')
all5a %>% select(client2) %>% head
all5a<-read.csv('all5a.csv')[,-1]
all5a<- all5a[!(names(all5a) %in% c('Job.Name', 'Opportunity', 'Client.Company','Job.Address',
'Suburb'))]
#substitute all the codes in
#client2
code.client2<- read.csv('Code_client2.csv')
all5a<- merge(all5a, code.client2[,2:3], by= 'client2', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.client'
#sub in client contact
code.contact<- read.csv('code_contact.csv')
all5a<- merge(all5a, code.contact[,2:3], by.x= 'Client.Contact', by.y= 'contact', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.contact'
#sub in job number
code.job<- read.csv('code_job.csv')[,-1]
all5a<- merge(all5a, code.job, by.x= 'Job.Number', by.y= 'job1', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code2']<-'code.jobnum'
#code users into.. 'Director', 'Project.Engineer', 'Engineer.2'
code.staff<- read.csv('code_users2.csv')[,-c(1,5)]
all5a<- merge(all5a, code.staff, by.x= 'Director', by.y= 'User', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.director'
all5a<- all5a[,!(names(all5a) %in% 'Position')]
all5a<- merge(all5a, code.staff, by.x= 'Project.Engineer', by.y= 'User', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.ProjEng'
colnames(all5a)[names(all5a) %in% 'Position']<-'ProjEng.Pos'
all5a<- merge(all5a, code.staff, by.x= 'Engineer.2', by.y= 'User', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.Eng2'
colnames(all5a)[names(all5a) %in% 'Position']<-'Eng2.Pos'
#delete columns - Director, Project.Engineer, Engineer.2
all5a<- all5a[,!(names(all5a) %in% c('Director', 'Project.Engineer', 'Engineer.2'))]
#investigate Parent.Job
invest<- all5a[!(is.na(all5a$Parent.Job)),(names(all5a) %in% c('Parent.Job', 'Job.Number'))]
#just delete Parent.Job - milestones tell you the same thing
all5a<- all5a[,!(names(all5a) %in% c('client2', 'Job.Number', 'Client.Contact', 'Parent.Job', 'caredfor'))]
all5a<- arrange(all5a, Start.Date)
all5a %>% select(client2) %>% head
write.csv(all5a, 'all6.csv')
all6<- read.csv('all6.csv')[,-1]
inv.eng<- read.csv('invoices_eng.csv')[,-1]
all6a<- merge(all6, inv.eng %>% select(code.jobnum, num.inv, mean.inv, Inv.freq, num.neginv), by='code.jobnum', all.x=T)
all6a<- merge(all6a, inv.eng %>% select(code.client, client.meaninv, client.invfreq, client.neginv, client.numinv, client.totinv) %>% unique,
by='code.client', all.x=T)
test<- merge(all6 %>% select(mlsto), inv.eng %>% select(mlsto), by= 'mlsto', all.x=TRUE, all.y=TRUE)
inv.eng<- read.csv('invoices_eng.csv')[,-1]
inv.eng %>% select(num.inv) %>% summary
Invoices.a<-read.csv('invoices_clean.csv')[,-1]
Inv.sum<-read.csv('inv_sum.csv')[,-1]
#### ENGINEERING VARIABLES ######
#need to do by milestone!! because this is what relates directly to the return.pdol variable which we are measuring as 'success'
#Need to sum up all the profits and balances for jobs with milestones
# first
#create subset of just the things i want to add up - profits, balance, hours in each milestone
temp<- Invoices.a %>% select(Job.Number, Inv.Amount, Invoice.Date)
temp<- temp %>% arrange(Job.Number)
temp$Invoice.Date <- as.character(temp$Invoice.Date)
temp$Job.Number <- as.character(temp$Job.Number)
#create column for Date of prev invoice, prev job number, and prev invoiced amount
temp$testp.Invoice<- c(NA, temp$Invoice.Date[-nrow(temp)])
temp$prev.JN<- c(NA, temp$Job.Number[-nrow(temp)])
temp$prev.inv<- c(NA, temp$Inv.Amount[-nrow(temp)])
#new column which prints 'NA" if prev job.number is not the same as current OR if prevInv <=0
temp$prev.Invoice<- ifelse(temp$Job.Number == temp$prev.JN & temp$prev.inv>0 & temp$Inv.Amount>0, temp$testp.Invoice, NA)
temp<- temp %>% select(-testp.Invoice, -prev.JN, -prev.inv)
temp$Invoice.Date<- as.Date(temp$Invoice.Date)
temp$prev.Invoice<- as.Date(temp$prev.Invoice)
#create new column for milestone prefix
temp1<- temp[1:7680,]
#string split to create another column with the first part of a job number. For the first half of jobs just the first bit indicates it could be invoiced together ie 2002.001 by itself
temp1$mlsto<-sapply(temp1$Job.Number,FUN=function(x){
paste(strsplit(x,split='[.]')[[1]][1], strsplit(x,split='[.]')[[1]][2], sep=".")})
#do the same with second half of data
temp2<- temp[7681:11627,]
temp2$mlsto<-sapply(temp2$Job.Number,FUN=function(x){
substr(x,1,10)})
temp2$mlsto<- ifelse(temp2$mlsto == '2011.072.3', temp2$Job.Number, temp2$mlsto)
#rbind temp1 and temp2 back together to make temp
temp<- rbind(temp1, temp2)
#now create engineered variables using mlsto column in ddply
### VAR1 ###
#number of invoices per mlsto
v1<- ddply(temp %>% filter(Inv.Amount>0), .(mlsto), nrow)
#mean size of invoice per project
temp<- transform(temp, btwn.inv = Invoice.Date-prev.Invoice)
v2<- ddply(temp %>% filter(Inv.Amount>0), .(mlsto), summarise,
mean.inv = mean(Inv.Amount) %>% round(2))
#mean freq of invoice per mlsto
v3<- ddply(temp %>% filter(Inv.Amount>0 & btwn.inv>0), .(mlsto), summarise,
Inv.freq = mean(na.omit(btwn.inv)) %>% round(0))
#num of negative invoices for project
v4<- ddply(temp %>% filter(Inv.Amount<0), .(mlsto), nrow)
#now to add client codes as column
all5a<-read.csv('all5a.csv')[,-1]
all5a<- all5a %>% select(Job.Number, client2, inv.mlsto)
#substitute all the codes in
#client2
code.client2<- read.csv('Code_client2.csv')
all5a<- merge(all5a, code.client2[,2:3], by= 'client2', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code']<-'code.client'
#code.jobnum
code.job<- read.csv('code_job.csv')[,-1]
all5a<- merge(all5a, code.job, by.x= 'Job.Number', by.y= 'job1', all.x=TRUE)
colnames(all5a)[names(all5a) %in% 'code2']<-'code.jobnum'
#add client code and code.jobnum as column to temp
temp<- merge(temp, all5a %>% select(Job.Number,code.client, inv.mlsto, code.jobnum), by = 'Job.Number', all.x=TRUE)
#delete all rows where code.jobnum == NA
temp<- temp %>% filter(!is.na(code.jobnum))
#start making summary variables by client
#mean invoice size for client
v5<- ddply(temp %>% filter(Inv.Amount>0), .(code.client), summarise,
client.meaninv = mean(Inv.Amount) %>% round(2))
#mean inv freq for client
v6<- ddply(temp %>% filter(Inv.Amount>0 & btwn.inv>0), .(code.client), summarise,
client.invfreq = mean(na.omit(btwn.inv)) %>% round(0))
#number of neg inv for client
v7<- ddply(temp %>% filter(Inv.Amount<0), .(code.client), nrow)
#start creating final df to merge to all 6 via mlsto
inv.eng<- temp %>% select(code.jobnum) %>% unique
inv.eng<- merge(inv.eng, temp %>% select(code.jobnum, mlsto) %>% unique(), by='code.jobnum', all.x=TRUE, all.y=FALSE)
inv.eng<- merge(inv.eng, temp %>% select(code.jobnum, inv.mlsto) %>% unique(), by='code.jobnum', all.x=TRUE, all.y=FALSE)
inv.eng<- merge(inv.eng, temp %>% select(code.jobnum, code.client) %>% unique(), by='code.jobnum', all.x=TRUE, all.y=FALSE)
inv.eng<- merge(inv.eng, v1, by='mlsto', all.x=TRUE)
inv.eng<- merge(inv.eng, v2, by= 'mlsto', all.x=TRUE)
inv.eng<- merge(inv.eng, v3, by= 'mlsto', all.x=TRUE)
inv.eng<- merge(inv.eng, v4, by= 'mlsto', all.x=TRUE)
#turn all NA into zeroes
inv.eng<- merge(inv.eng, v5, by= 'code.client', all.x=TRUE)
inv.eng<- merge(inv.eng, v6, by= 'code.client', all.x=TRUE)
inv.eng<- merge(inv.eng, v7, by= 'code.client', all.x=TRUE)
colnames(inv.eng)[names(inv.eng) %in% 'V1.x']<-'num.inv'
colnames(inv.eng)[names(inv.eng) %in% 'V1.y']<-'num.neginv'
colnames(inv.eng)[names(inv.eng) %in% 'V1']<-'client.neginv'
inv.eng[is.na(inv.eng$num.neginv),]$num.neginv <- 0
inv.eng[is.na(inv.eng$client.neginv),]$client.neginv <- 0
#final variables!!
#mean size of invoice over total invoiced per project - same as num.inv!! except inverse
#mean number of invoices per job for client
v8<- ddply(inv.eng %>% filter(!is.na(num.inv)), .(code.client), summarise, client.numinv = mean(num.inv) %>% round(2))
#mean total invoiced per client
v9<- ddply(inv.eng, .(code.client), summarise, client.totinv = mean(inv.mlsto) %>% round(2))
inv.eng<- merge(inv.eng, v8, by= 'code.client', all.x=TRUE)
inv.eng<- merge(inv.eng, v9, by= 'code.client', all.x=TRUE)
inv.eng %>% select(num.inv) %>% summary
inv.eng %>% select(client.numinv) %>% summary
inv.eng %>% select(Inv.freq) %>% summary
inv.eng %>% filter(is.na(Inv.freq)) %>% nrow
inv.eng %>% filter(is.na(client.invfreq)) %>% nrow
inv.eng %>% filter(is.na(client.numinv)) %>% nrow
inv.eng %>% filter(is.na(client.meaninv)) %>% nrow
inv.eng %>% filter(is.na(client.mnuminv)) %>% nrow
inv.eng %>% filter(is.na(client.numinv)) %>% nrow
inv.eng %>% filter(is.na(numinv)) %>% nrow
inv.eng %>% filter(is.na(num.inv)) %>% nrow
v1<- ddply(temp %>% filter(Inv.Amount>0), .(mlsto), nrow)
summary(v1)
v1 %>% select(mlsto) %>% unique() %>% length
v1 %>% select(mlsto) %>% unique() %>% nrow
inv.eng %>% select(mlsto) %>% unique() %>% nrow
2546-2370
inv.eng %>% summary
inv.eng %>% filter(inv.mlsto <=0) %>% nrow
inv.eng %>% filter(is.na(num.inv)) %>% select(num.inv, inv.mlsto)
write.csv(inv.eng, 'invoices_eng.csv')
inv.eng<- read.csv('invoices_eng.csv')[,-1]
all6a<- merge(all6, inv.eng %>% select(code.jobnum, num.inv, mean.inv, Inv.freq, num.neginv), by='code.jobnum', all.x=T)
all6a<- merge(all6a, inv.eng %>% select(code.client, client.meaninv, client.invfreq, client.neginv, client.numinv, client.totinv) %>% unique,
by='code.client', all.x=T)
test<- merge(all6 %>% select(mlsto), inv.eng %>% select(mlsto), by= 'mlsto', all.x=TRUE, all.y=TRUE)
write.csv(all6a,'all6a.csv')
all6a<- read.csv('all6a.csv')[,-1]
all6a$Start.Date<- as.Date(all6a$Start.Date)
#delete milestone rows! sort by highest hours - choose this discipline.!
#sort by hours first
all6a<- all6a %>% arrange(mlsto, -hours)
dup<- all6a[,names(all6a) %in% c('mlsto')]
all7<-all6a[!(all6a$inv.mlsto==0 | duplicated(dup)),]
summary(all7$num.inv)
dim(all7)
write.csv(all7, 'all7.csv')
all7$Start.Date<- as.Date(all7$Start.Date)
all7a<- all7 %>% filter(return.pdol <=3 & return.pdol> -2)
summary(all7a$num.inv)
all7a %>% filter(is.na(num.inv))
inv.eng %>% filter(inv.mlsto <=0) %>% nrow
inv.eng %>% select(mlsto) %>% unique() %>% nrow
v1 %>% select(mlsto) %>% unique() %>% nrow
2546-2370
summary(inv.eng$inv.mlsto)
temp %>% select(mlsto) %>% unique() %>% nrow
nrow(v1)
str(temp)
inv.eng %>% filter(Inv.Amount <=0) %>% nrow
str(inv.eng)
all7a %>% filter(is.na(num.inv))
all7a %>% filter(is.na(num.inv)) %>% select(mlsto)
inv.eng %>% filter(mlsto=='2002.027')
inv.eng %>% filter(mlsto=='2002.138')
inv.eng %>% filter(mlsto=='2003.071')
getwd()
all6<- read.csv('all6.csv')[,-1]
all6 %>% filter(mlsto=='2002.027')
inv.eng<- read.csv('invoices_eng.csv')[,-1]
all6a<- merge(all6, inv.eng %>% select(code.jobnum, num.inv, mean.inv, Inv.freq, num.neginv), by='code.jobnum', all.x=T)
all6a<- merge(all6a, inv.eng %>% select(code.client, client.meaninv, client.invfreq, client.neginv, client.numinv, client.totinv) %>% unique,
by='code.client', all.x=T)
all6 %>% filter(mlsto=='2002.027') %>% select(num.inv)
all6a %>% filter(mlsto=='2002.027') %>% select(num.inv)
all6<- read.csv('all6.csv')[,-1]
inv.eng<- read.csv('invoices_eng.csv')[,-1]
all6a %>% arrange(mlsto,-hours) %>% filter(mlsto=='2002.027') %>% select(num.inv)
all6a %>% arrange(mlsto,-hours) %>% filter(mlsto=='2002.027') %>% select(num.inv, hours)
all6a %>% arrange(mlsto,-hours) %>% filter(mlsto=='2002.027') %>% select(num.inv, hours, inv.mlsto)
all6a<- merge(all6, inv.eng %>% select(mlsto, num.inv, mean.inv, Inv.freq, num.neginv), by='mlsto', all.x=T)
all6<- read.csv('all6.csv')[,-1]
inv.eng<- read.csv('invoices_eng.csv')[,-1]
all6a<- merge(all6, inv.eng %>% select(mlsto, num.inv, mean.inv, Inv.freq, num.neginv), by='mlsto', all.x=T)
all6a<- merge(all6a, inv.eng %>% select(code.client, client.meaninv, client.invfreq, client.neginv, client.numinv, client.totinv) %>% unique,
by='code.client', all.x=T)
all6a %>% arrange(mlsto,-hours) %>% filter(mlsto=='2002.027') %>% select(num.inv, hours, inv.mlsto)
inv.eng %>% select(mlsto, num.inv, mean.inv, Inv.freq, num.neginv) %>% head
all6<- read.csv('all6.csv')[,-1]
inv.eng<- read.csv('invoices_eng.csv')[,-1]
all6a<- merge(all6, inv.eng %>% select(mlsto, num.inv, mean.inv, Inv.freq, num.neginv) %>% unique,
by='mlsto', all.x=T)
all6a<- merge(all6a, inv.eng %>% select(code.client, client.meaninv, client.invfreq, client.neginv, client.numinv, client.totinv) %>% unique,
by='code.client', all.x=T)
all6a %>% arrange(mlsto,-hours) %>% filter(mlsto=='2002.027') %>% select(num.inv, hours, inv.mlsto)
dim(all6a)
write.csv(all6a,'all6a.csv')
all6a$Start.Date<- as.Date(all6a$Start.Date)
#delete milestone rows! sort by highest hours - choose this discipline.!
#sort by hours first
all6a<- all6a %>% arrange(mlsto, -hours)
dup<- all6a[,names(all6a) %in% c('mlsto')]
all7<-all6a[!(all6a$inv.mlsto==0 | duplicated(dup)),]
all7$Start.Date<- as.Date(all7$Start.Date)
all7a<- all7 %>% filter(return.pdol <=3 & return.pdol> -2)
all7a<- all7 %>% select(-Paperless,-Innovation, -JobInvCount,-job.first.inv.email.Sent,
-Total.Costs..AUD., -Stage, -Folders, -Total.Fee, -Disburse, -Subcon.fee,
-Job.Size, -Tot.Invoiced, -charge, -cost, -Dis.subcon, -hours,-profit,-balance,
-Role)
all7a %>% select(num.inv) %>% summary
all7a %>% filter(is.na(num.inv))
all7b<- all7a
all7a %>% filter(is.na(State))
all7a %>% filter(is.na(State)) %>% nrow
all7a %>% filter(is.na(Business)) %>% nrow
all7a %>% filter(is.na(Biz.size)) %>% nrow
all7a %>% filter(is.na(no.users)) %>% nrow
all7a %>% filter(is.na(pc.director)) %>% nrow
all7a %>% filter(is.na(pc.director))
all7a<- read.csv('all7a.csv')
str(all7a)
all5a<- read.csv('all5a.csv')
all51[all51$code.client %in% 'C2835',]$client2
all5a[all5a$code.client %in% 'C2835',]$client2
details<- read.csv('C:/Users/n9232371/Documents/Consultbusiness/data/17marchclients.csv',
na.strings = c("", " ", "NA"))
details<- read.csv('17marchclients.csv',
na.strings = c("", " ", "NA"))
head(details)
names(details)[2]<- 'Business'
names(details)[4]<- 'Biz.size'
str(details)
dim(details)
details<- details[,c(1,5:9)]
names(details)[2]<- 'Business'
names(details)[4]<- 'Biz.size'
names(details)[5]<- 'Biz.type'
names(details)[6]<- 'Biz.age'
head(Details)
head(details)
details<-details[rowSums(is.na(details))!=4,]
head(details)
code.client<- read.csv('code_client2.csv')
code.client %>% head
code.client<- read.csv('code_client2.csv')[,-1]
code.client %>% head
nrow(code.clieint)
nrow(code.client)
nrow(details)
details %>% head(20)
details<-details[rowSums(is.na(details))!>4,]
details<-details[rowSums(is.na(details))!=5,]
details<-details[rowSums(is.na(details))!=4,]
details %>% head(20)
nrow(details)
nrow(code.client)
head(details)
details<- merge(details, code.client, by ='client', all.x=TRUE, all.y=FALSE)
head(code.client)
details<- merge(details, code.client, by.x ='client', by.y ='client2', all.x=TRUE, all.y=FALSE)
head(deetails)
head(details)
dim(details)
summary(details)
transform(details, client.age == 2014- Biz.age)
details<- transform(details, client.age = 2014- Biz.age)
head(details)
summary(details$client.age)
2014-1961
details %>% arrange(-client.age) %>% head
details<- read.csv('17marchclients.csv',
na.strings = c("", " ", "NA"))
details<- details[,c(1,5:9)]
#rename columns
names(details)[2]<- 'Business'
names(details)[4]<- 'Biz.size'
names(details)[5]<- 'Biz.type'
names(details)[6]<- 'Biz.age'
#delete rows with 4 NA values
details<-details[rowSums(is.na(details))!=5,]
details<-details[rowSums(is.na(details))!=4,]
#add row for client code
code.client<- read.csv('code_client2.csv')[,-1]
details<- merge(details, code.client, by.x ='client', by.y ='client2', all.x=TRUE, all.y=FALSE)
details<- transform(details, client.age = 2014- Biz.age)
details %>% arrange(-client.age) %>% head
head(All7b)
head(all7b)
all7b<- read.csv('all7b.csv')
nrow(all7b)
all7b<- merge(all7b, details %>% select(code, client.age), by.x = 'code.client', by.y = 'code', all.x=TRUE, all.y=FALSE)
nrow(all7b)
head(all7b)
summary(all7b$client.age)
