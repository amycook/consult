formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output(df=all8a, no.tests = 2)
no.tests = 2
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
i=1
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(i in 1:length(variables)){
formula = paste(formula, variables[i], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,1]
summary.tests
i
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output(df=all8a, no.tests = 2)
final.output(df=all8a, no.tests = 50)
cats = c('code.client', 'code.contact', 'JD.Second', 'Business')
k=1
test.df$cats[k]
test.df$code.client
cats[k]
test.df[,cats[k]]
dim(test.df)
k=1
cats[k] %in% vars
vars
k=4
cats[k] %in% vars
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
dim(test.df)
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
if('code.client' %in% vars){
test.df = test.df %>% filter(code.client %in% unique(train.df$code.client))
}
if('code.contact' %in% vars){
test.df = test.df %>% filter(code.contact %in% unique(train.df$code.contact))
}
if('JD.Second' %in% vars){
test.df = test.df %>% filter(JD.Second %in% unique(train.df$JD.Second))
}
if('Business' %in% vars){
test.df = test.df %>% filter(Business %in% unique(train.df$Business))
}
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 2)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE')
return(summary.tests)
}
final.output(df=all8a, no.tests = 5)
results = final.output(df=all8a, no.tests = 50)
results
?group_indices
final.output<- function(df=all8a, no.tests = 50) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
for(i in 1:no.tests){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
#make reduced dataset with complete cases for all variables we want to use
reduced = df[-samp,]
reduced = reduced[complete.cases(reduced[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
summary.tests[i,3]= nrow(test.df)
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE', 'test.nrow')
return(summary.tests)
}
results = final.output(df=all8a, no.tests = 50)
results
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
results = final.output(df=all8a, no.tests = 100)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
results = final.output(df=all8a, no.tests = 100)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
results = results %>% filter(test.nrow>150)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
ggplot(results, aes(x = random.RMSE - final.RMSE)) + geom_histogram()
?t.test
diff = results$random.RMSE - results$final.RMSE
diff
diff = as.dataframe('diff' = diff)
diff = data.frame('diff' = diff)
diff
ggplot(diff, aes(x =diff)) + geom_histogram()
?t.test
t.test(diff, alternative = "greater", mu = 0)
samp = NA
final.output<- function(df=all8a, no.tests = 50, core = TRUE) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
for(i in 1:no.tests){
if(core == FALSE){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
} else{
variables = c('inv.mlsto.log', 'Discipline', 'timespan.cbrt',
'no.users', 'pc.pro', 'Business')
}
#make reduced dataset with complete cases for all variables we want to use
reduced = df[complete.cases(df[,variables]),]
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'inv.mlsto.log' %in% variables){
formula = paste(formula, 'inv.mlsto.log*pc.pro', sep= " + ")
}
if('inv.mlsto.log' %in% variables &
'code.client' %in% variables){
formula = paste(formula, 'inv.mlsto.log*code.client', sep= " + ")
}
if('JD.Second' %in% variables &
'no.users' %in% variables){
formula = paste(formula, 'JD.Second*no.users', sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = aov(as.formula(formula), data = train.df)
fit= summary(final)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
summary.tests[i,3]= nrow(test.df)
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE', 'test.nrow')
return(summary.tests)
}
results = final.output(df=all8a, no.tests = 50, core = TRUE)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
diff = results$random.RMSE - results$final.RMSE
diff = data.frame('diff' = diff)
ggplot(diff, aes(x =diff)) + geom_histogram()
t.test(diff, alternative = "greater", mu = 0)
results.core = final.output(df=all8a, no.tests = 50, core = TRUE)
results = final.output(df=all8a, no.tests = 100, core = FALSE)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
diff = results$random.RMSE - results$final.RMSE
diff = data.frame('diff' = diff)
ggplot(diff, aes(x =diff)) + geom_histogram()
t.test(diff, alternative = "greater", mu = 0)
saveRDS(results, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
saveRDS(results.core, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm_core.rds")
head(results)
results$diff = results %>% mutate(random.RMSE - final.RMSE)
head(results)
results = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
head(results)
results$diff = results %>% mutate(diff = random.RMSE - final.RMSE)
head(results)
?mutate
results = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
head(results)
results$diff = results %>% mutate(diff = (random.RMSE - final.RMSE))
results = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
results = results %>% mutate(diff = random.RMSE - final.RMSE)
head(results)
ggplot(results, aes(x = test.nrow, y = final.RMSE)) + geom_point()
ggplot(results, aes(x =diff)) + geom_histogram()
results = results %>% filter(diff>-25)
ggplot(results, aes(x =diff)) + geom_histogram()
results.core = results.core %>% mutate(diff = random.RMSE - final.RMSE)
head(results.core)
saveRDS(results, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm.rds")
saveRDS(results.core, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/reg_lm_core.rds")
results %>% ggplot(., aes(x = test.nrow, y = final.RMSE)) + geom_point()
t_test = t.test(diff, alternative = "greater", mu = 0)
str(t_test)
t_test$p.value
cfor.varimp = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/cfor_varimp.rds")
ggplot(data=cfor.varimp, aes(x=var, y=imp)) +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each Y-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
p
a
levels(df[,var]) = factor(df[,var], levels= a[order(-a$summ),][,var])
levels(df[,var])
factor(df[,var], levels= a[order(-a$summ),][,var])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
colour = 'deeppink3'
clust = 'group.num'
var = 'JD.Second'
df=all7c
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
a
factor(df[,var], levels= a[order(-a$summ),][,var])
levels= a[order(-a$summ),][,var]
levels
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each Y-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
p
clust.summary
heatmap<- function(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE){
#order var levels by highest amount invoiced total
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
if(percentof_clust== TRUE){
#table with percentages within each category
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each cluster') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
else{
#table with percentages within each cluster
tbl= round(prop.table(table(df[,clust],df[,var]),1)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='Profit measure', y='', title= 'percentage of jobs in each X-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
print(p)
}
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=TRUE)
heatmap<- function(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE){
#order var levels by highest amount invoiced total
a = ddply(df, c(var), summarise, summ = sum(inv.mlsto))
df[,var] = factor(df[,var], levels= a[order(-a$summ),][,var])
if(percentof_clust== FALSE){
#table with percentages within each category
tbl= round(prop.table(table(df[,clust],df[,var]),2)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='', y='', title= 'percentage of jobs in each cluster') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
else{
#table with percentages within each cluster
tbl= round(prop.table(table(df[,clust],df[,var]),1)*100,2) %>% as.data.frame
p = ggplot(tbl, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=Freq), colour = 'white') +
scale_fill_gradient(low='white', high=colour, name = 'percent') +
labs(x='Profit measure', y='', title= 'percentage of jobs in each X-axis category') +
theme(axis.ticks=element_blank(),
axis.text.x=element_text(angle=45,hjust=1))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
}
print(p)
=======
q<- ggplot(data=var.imp, aes(x=var, y=imp)) + theme(axis.text.x=element_text(angle=45,hjust=1))
q + geom_bar(stat='identity')
q
var.imp
q + geom_bar(stat='identity')
saveRDS(var.imp, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/cfor_varimp.rds")
library(gbm)
setwd("D:/Work It Current/Nicole Data/AgeofOnset")
load("D:/Work It Current/Nicole Data/AgeofOnset/AgeofOnset PredModel.RData")
j
test_fold <- parkpdShort[folds[[j]], ]
run_gbmOnsetGroup2 <- gbm(as.formula(formula_onsetgroup2), data = parkpdShort[-folds[[j]], ],
distribution = 'bernoulli', n.trees = 3000, shrinkage = 0.001,
interaction.depth = 2, n.minobsinnode = 30)
run_gbmOnsetGroup2$fit
as.formula(formula_onsetgroup2)
data = parkpdShort[-folds[[j]], ]
head(data)
class(data$onset_group2)
parkpdShort$onset_group2 <- as.character(parkpdShort$onset_group2)
folds <- createFolds(parkpdShort$onset_group2, k = 10, list = TRUE, returnTrain = FALSE) # set up 10 fold using caret function
test_fold <- parkpdShort[folds[[j]], ]
run_gbmOnsetGroup2 <- gbm(as.formula(formula_onsetgroup2), data = parkpdShort[-folds[[j]], ],
distribution = 'bernoulli', n.trees = 3000, shrinkage = 0.001,
interaction.depth = 2, n.minobsinnode = 30)
run_gbmOnsetGroup2v4fit
run_gbmOnsetGroup2run_gbmOnsetGroup2$fit
run_gbmOnsetGroup2$fit
parkpdShort$onset_group2 <- as.numeric(parkpdShort$onset_group2)
folds <- createFolds(parkpdShort$onset_group2, k = 10, list = TRUE, returnTrain = FALSE) # set up 10 fold using caret function
test_fold <- parkpdShort[folds[[j]], ]
run_gbmOnsetGroup2 <- gbm(as.formula(formula_onsetgroup2), data = parkpdShort[-folds[[j]], ],
distribution = 'bernoulli', n.trees = 3000, shrinkage = 0.001,
interaction.depth = 2, n.minobsinnode = 30)
library(caret)
parkpdShort$onset_group2 <- as.numeric(parkpdShort$onset_group2)
folds <- createFolds(parkpdShort$onset_group2, k = 10, list = TRUE, returnTrain = FALSE) # set up 10 fold using caret function
test_fold <- parkpdShort[folds[[j]], ]
run_gbmOnsetGroup2 <- gbm(as.formula(formula_onsetgroup2), data = parkpdShort[-folds[[j]], ],
distribution = 'bernoulli', n.trees = 3000, shrinkage = 0.001,
interaction.depth = 2, n.minobsinnode = 30)
run_gbmOnsetGroup2$fit
class(parkpdShort$onset_group2)
run_gbmOnsetGroup2Pred <- predict(run_gbmOnsetGroup2, test_fold, n.tree = 3000)
head(run_gbmOnsetGroup2Pred)
parkpdShort$onset_group2 <- as.integer(parkpdShort$onset_group2)
folds <- createFolds(parkpdShort$onset_group2, k = 10, list = TRUE, returnTrain = FALSE) # set up 10 fold using caret function
test_fold <- parkpdShort[folds[[j]], ]
run_gbmOnsetGroup2 <- gbm(as.formula(formula_onsetgroup2), data = parkpdShort[-folds[[j]], ],
distribution = 'bernoulli', n.trees = 3000, shrinkage = 0.001,
interaction.depth = 2, n.minobsinnode = 30)
run_gbmOnsetGroup2Pred <- predict(run_gbmOnsetGroup2, test_fold, n.tree = 3000)
head(run_gbmOnsetGroup2Pred)
as.formula(formula_onsetgroup2)
run_gbmOnsetGroup2Pred <- predict(run_gbmOnsetGroup2, test_fold, n.tree = 3000, type = "response")
head(run_gbmOnsetGroup2Pred)
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
vars.vec<- c('Job.Source', 'Job.Detail.Secondary', 'Type', 'Project.Value', 'no.employees','code.client',
'client.age', 'contact.count', 'JD.Second', 'Billing.Type', 'dist','Post.Code',
'code.contact','contact.count', 'Job.Type.Primary','JD.Primary','ProjEng.Pos', 'code.ProjEng', 'pos.tech',
'majority.pos', 'pc.majpos')
extra=vars.vec
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
i
length(vars.vec)
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
summary(model)[[1]]
summary(model)[[1]] %>% rownames
library(magrittr)
summary(model)[[1]] %>% rownames
mod.vars = summary(model)[[1]] %>% rownames %>% .[-12]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars
extra[i]
mod.vars = sub(extra[i], "add.variable", mod.vars)
mod.vars
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-12]
mod.vars
aov.loop<- function(extra=vars.vec){
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-12]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-12]
add.variable = rep(incomp.vars[i], 11)
plot.pvals = rbind(plot.pvals,
data.frame(mod.vars, p.val, add.variable))
}}
aov.loop<- function(extra=vars.vec){
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-12]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-12]
add.variable = rep(incomp.vars[i], 11)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
return(plot.pvals)
}}
plot.pvals = aov.loop(extra=vars.vec)
aov.loop<- function(extra=vars.vec){
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-12]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-12]
add.variable = rep(extra[i], 11)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
return(plot.pvals)
}}
plot.pvals = aov.loop(extra=vars.vec)
aov.loop<- function(extra=vars.vec){
plot.pvals = NULL
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-12]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-12]
add.variable = rep(extra[i], 11)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
return(plot.pvals)
}}
plot.pvals = aov.loop(extra=vars.vec)
order.vars = ddply(plot.pvals, .(mod.vars), summarise, med = median(p.val))
order.vars = arrange(order.vars, med)
plot.pvals <- within(plot.pvals,
mod.vars <- factor(mod.vars,
library(dplyr)
library(dplyr)
rm(dplyr)
library(plyr)
library(dplyr)
order.vars = ddply(plot.pvals, .(mod.vars), summarise, med = median(p.val))
order.vars = arrange(order.vars, med)
plot.pvals <- within(plot.pvals,
mod.vars <- factor(mod.vars,
levels=order.vars$mod.vars))
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_hline(yintercept = 0.05, colour = 'red', linetype = 2) +
scale_y_continuous(breaks = c(0,0.05,.25,.5,.75,1)) +
labs(y = "P value of F statistic", x = "Independent Variables",
title = "Summary of P-values from Anova tests")
library(ggplot2)
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_hline(yintercept = 0.05, colour = 'red', linetype = 2) +
scale_y_continuous(breaks = c(0,0.05,.25,.5,.75,1)) +
labs(y = "P value of F statistic", x = "Independent Variables",
title = "Summary of P-values from Anova tests")
gg
dim(plot.pvals)
length(extra)
aov.loop<- function(extra=vars.vec){
plot.pvals = NULL
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-12]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-12]
add.variable = rep(extra[i], 11)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
}
return(plot.pvals)
}
plot.pvals = aov.loop(extra=vars.vec)
dim(plot.pvals)
231/11
order.vars = ddply(plot.pvals, .(mod.vars), summarise, med = median(p.val))
plot.pvals <- within(plot.pvals,
order.vars = arrange(order.vars, med)
mod.vars <- factor(mod.vars,
levels=order.vars$mod.vars))
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_hline(yintercept = 0.05, colour = 'red', linetype = 2) +
scale_y_continuous(breaks = c(0,0.05,.25,.5,.75,1)) +
labs(y = "P value of F statistic", x = "Independent Variables",
title = "Summary of P-values from Anova tests")
order.vars = ddply(plot.pvals, .(mod.vars), summarise, med = median(p.val))
order.vars = arrange(order.vars, med)
plot.pvals <- within(plot.pvals,
mod.vars <- factor(mod.vars,
levels=order.vars$mod.vars))
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_hline(yintercept = 0.05, colour = 'red', linetype = 2) +
scale_y_continuous(breaks = c(0,0.05,.25,.5,.75,1)) +
labs(y = "P value of F statistic", x = "Independent Variables",
title = "Summary of P-values from Anova tests")
gg
saveRDS(plot.pvals, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/AOV_varimp_plot.rds")
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
saveRDS(plot.pvals, "C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/AOV_varimp_plot.rds")
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
length(vars.vec)
plot.pvals %>% filter(p.val <=0.05, mod.vars == "add.variable")
names(all7c) %in% 'pc.director'
aov.loop<- function(extra=vars.vec){
plot.pvals = NULL
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business','Biz.type',
'Biz.size', 'pc.director',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-12]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-12]
add.variable = rep(extra[i], 11)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
}
return(plot.pvals)
}
plot.pvals = aov.loop(extra=vars.vec)
#order levels in plot.pvals by median
order.vars = ddply(plot.pvals, .(mod.vars), summarise, med = median(p.val))
order.vars = arrange(order.vars, med)
plot.pvals <- within(plot.pvals,
mod.vars <- factor(mod.vars,
levels=order.vars$mod.vars))
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_hline(yintercept = 0.05, colour = 'red', linetype = 2) +
scale_y_continuous(breaks = c(0,0.05,.25,.5,.75,1)) +
labs(y = "P value of F statistic", x = "Independent Variables",
title = "Summary of P-values from Anova tests")
gg
aov.loop<- function(extra=vars.vec){
plot.pvals = NULL
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business','Biz.type',
'Biz.size', 'pc.director',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-15]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-15]
add.variable = rep(extra[i], 14)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
}
return(plot.pvals)
}
plot.pvals = aov.loop(extra=vars.vec)
vars.vec<- c('Job.Source', 'Job.Detail.Secondary', 'Type', 'Project.Value', 'no.employees','code.client',
'client.age', 'contact.count', 'JD.Second', 'Billing.Type', 'dist','Post.Code',
'code.contact','contact.count', 'Job.Type.Primary','JD.Primary','ProjEng.Pos', 'code.ProjEng',
'pos.tech', 'majority.pos', 'pc.majpos')
extra=vars.vec
i=1
plot.pvals = NULL
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business','Biz.type',
'Biz.size', 'pc.director',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director", extra[i], sep = "+")
aov.loop<- function(extra=vars.vec){
plot.pvals = NULL
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business','Biz.type',
'Biz.size', 'pc.director',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director + Biz.type +
Biz.size + pc.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-15]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-15]
add.variable = rep(extra[i], 14)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
>>>>>>> origin/master
}
return(plot.pvals)
}
plot.pvals = aov.loop(extra=vars.vec)
#order levels in plot.pvals by median
order.vars = ddply(plot.pvals, .(mod.vars), summarise, med = median(p.val))
order.vars = arrange(order.vars, med)
plot.pvals <- within(plot.pvals,
mod.vars <- factor(mod.vars,
levels=order.vars$mod.vars))
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_hline(yintercept = 0.05, colour = 'red', linetype = 2) +
scale_y_continuous(breaks = c(0,0.05,.25,.5,.75,1)) +
labs(y = "P value of F statistic", x = "Independent Variables",
title = "Summary of P-values from Anova tests")
gg
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
summary(model)[[1]] %>% rownames
aov.loop<- function(extra=vars.vec){
plot.pvals = NULL
for (i in 1:length(extra)) {
core.var = all7c[, names(all7c) %in% c('inv.mlsto','timespan','no.users','Discipline',
'pc.pro','client.totinv','Biz.type',
'code.director','Num.disc','Business',
'Biz.size', 'pc.director',
'return.pdol', extra[i])]
core.var = core.var[!is.na(core.var[, extra[i]]),]
formula = paste("return.pdol ~ inv.mlsto + Discipline + Business+Biz.type + Num.disc +
no.users + client.totinv + pc.pro + timespan + code.director +
Biz.size + pc.director", extra[i], sep = "+")
model = aov(as.formula(formula),data = core.var,na.action = na.omit)
#create columns for results and plotting
mod.vars = summary(model)[[1]] %>% rownames %>% .[-14]
mod.vars = sub("\\s+$", "", mod.vars)
mod.vars = sub(extra[i], "add.variable", mod.vars)
p.val = summary(model)[[1]]$'Pr(>F)' %>% .[-14]
add.variable = rep(extra[i], 13)
plot.pvals = rbind(plot.pvals, data.frame(mod.vars, p.val, add.variable))
}
return(plot.pvals)
}
plot.pvals = aov.loop(extra=vars.vec)
#order levels in plot.pvals by median
order.vars = ddply(plot.pvals, .(mod.vars), summarise, med = median(p.val))
order.vars = arrange(order.vars, med)
plot.pvals <- within(plot.pvals,
mod.vars <- factor(mod.vars,
levels=order.vars$mod.vars))
gg <- ggplot(plot.pvals, aes(x = mod.vars, y = p.val)) + geom_boxplot() +
>>>>>>> origin/master
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(y = "Relative Variable Importance Value", x = "Independent Variables", title = "cForest Variable Importance rankings of Complete Variables")
cfor.varimp = readRDS("C:/Users/n9232371/Documents/github/consult/finalwriteup/report_data/cfor_varimp.rds")
ggplot(data=cfor.varimp, aes(x=var, y=imp)) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_bar(stat='identity') +
labs(y = "Relative Variable Importance Value", x = "Independent Variables", title = "cForest Variable Importance rankings of Complete Variables")
<<<<<<< HEAD
dim(all8a)
dim(complete.cases(all8a))
complete.cases(iris) %>% dim
?complete.cases
complete.cases(iris)
all8a[complete.cases(all8a),] %>% dim
354/nrow(all8a)
=======
head(plot.pvals)
plot.pvals %>% filter(add.variable == "pc.majpos")
vars<- list('Job.Source', 'Job.Detail.Secondary', 'Type', 'Project.Value', 'no.employees',
'code.client',
'client.age', 'contact.count', 'JD.Second', 'Billing.Type', 'pos.tech',
'majority.pos', 'pc.majpos',
c('dist','Post.Code'),
c('code.contact','contact.count'), c('Job.Type.Primary','JD.Primary'),
c('ProjEng.Pos', 'code.ProjEng'))
cfor.plotsave<- function(extra= vars, name= 'vare'){
for(i in 1:length(vars)){
core.var= all7c[,names(all7c) %in% c('inv.mlsto', 'timespan', 'no.users',
'Discipline', 'pc.pro',
'client.totinv', 'pc.director', 'code.director', 'Num.disc',
'Business', 'Biz.type', 'Biz.size', 'return.pdol', extra[[i]])]
core.var = core.var[!is.na(core.var[,extra[[i]][1]]),]
#run cforest
cfor.var1= cforest(return.pdol~.,
data= core.var)
#calculate variable importances
var.imp= varimp(cfor.var1) %>% as.data.frame
colnames(var.imp)[names(var.imp) %in% '.']= 'imp'
var.imp$var = rownames(var.imp)
#reorder levels for bar plot
var.imp<- within(var.imp,
var <- factor(var,levels=var.imp[order(-abs(var.imp$imp)),]$var))
q= ggplot(data=var.imp, aes(x=var, y=imp)) + theme(axis.text.x=element_text(angle=45,hjust=1))
r=q + geom_bar(stat='identity') +
labs(title = extra[[i]])
#save plot
ggsave(plot=r,
filename=paste(name,i,'.png',sep=''),
path= 'C:/Users/n9232371/Documents/Consultbusiness/barplots/cforests/')
cat(i," ")
}
}
cfor.plotsave(extra=list('pc.majpos'), name='varf')
library(party)
cfor.plotsave(extra=list('pc.majpos'), name='varf')
cfor.plotsave<- function(extra= vars, name= 'vare'){
for(i in 1:length(extra)){
core.var= all7c[,names(all7c) %in% c('inv.mlsto', 'timespan', 'no.users',
'Discipline', 'pc.pro',
'client.totinv', 'pc.director', 'code.director', 'Num.disc',
'Business', 'Biz.type', 'Biz.size', 'return.pdol', extra[[i]])]
core.var = core.var[!is.na(core.var[,extra[[i]][1]]),]
#run cforest
cfor.var1= cforest(return.pdol~.,
data= core.var)
#calculate variable importances
var.imp= varimp(cfor.var1) %>% as.data.frame
colnames(var.imp)[names(var.imp) %in% '.']= 'imp'
var.imp$var = rownames(var.imp)
#reorder levels for bar plot
var.imp<- within(var.imp,
var <- factor(var,levels=var.imp[order(-abs(var.imp$imp)),]$var))
q= ggplot(data=var.imp, aes(x=var, y=imp)) + theme(axis.text.x=element_text(angle=45,hjust=1))
r=q + geom_bar(stat='identity') +
labs(title = extra[[i]])
#save plot
ggsave(plot=r,
filename=paste(name,i,'.png',sep=''),
path= 'C:/Users/n9232371/Documents/Consultbusiness/barplots/cforests/')
cat(i," ")
}
}
cfor.plotsave<- function(extra= vars, name= 'vare'){
for(i in 1:length(extra)){
core.var= all7c[,names(all7c) %in% c('inv.mlsto', 'timespan', 'no.users',
'Discipline', 'pc.pro',
'client.totinv', 'pc.director', 'code.director', 'Num.disc',
'Business', 'Biz.type', 'Biz.size', 'return.pdol', extra[[i]])]
core.var = core.var[!is.na(core.var[,extra[[i]][1]]),]
#run cforest
cfor.var1= cforest(return.pdol~.,
data= core.var)
#calculate variable importances
var.imp= varimp(cfor.var1) %>% as.data.frame
colnames(var.imp)[names(var.imp) %in% '.']= 'imp'
var.imp$var = rownames(var.imp)
#reorder levels for bar plot
var.imp<- within(var.imp,
var <- factor(var,levels=var.imp[order(-abs(var.imp$imp)),]$var))
q= ggplot(data=var.imp, aes(x=var, y=imp)) + theme(axis.text.x=element_text(angle=45,hjust=1))
r=q + geom_bar(stat='identity') +
labs(title = extra[[i]])
#save plot
ggsave(plot=r,
filename=paste(name,i,'.png',sep=''),
path= 'C:/Users/n9232371/Documents/Consultbusiness/barplots/cforests/')
cat(i," ")
}
}
<<<<<<< HEAD
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'JD.Second', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'majority.pos', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'majority.pos', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'Billing.Type', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'Discipline', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.client', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.client', df=all7c, percentof_clust=TRUE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.contact', df=all7c, percentof_clust=FALSE)
heatmap(colour = 'deeppink3', clust = 'group.num', var = 'code.contact', df=all7c, percentof_clust=TRUE)
clust.summary
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages('extrafont')
library('extrafont')
source('~/.active-rstudio-document', echo=TRUE)
?loadfonts
loadfonts(device='win')
loadfonts(device='pdf')
source('~/.active-rstudio-document', echo=TRUE)
p= ggplot(sub10 %>% filter(variable == 'pc.seniorpro', Discipline == 'Structural'), aes(x=percent.hrs, y= return.cut, colour= 'blue')) +
geom_smooth(method=loess, se=TRUE, aes(fill='blue'), alpha=.35) +
#                                 stat_summary(fun.x= mean, geom='point', shape = 2) +
#stat_summary(fun.data= mean_sdl, geom='crossbar', mult =1) +
theme(legend.position="none",
axis.text.x=element_text(angle=45,hjust=1),
text=element_text(size=12) ,
plot.title = element_text(size=11, family= 'Times New Roman', face='plain'),
axis.title.y = element_text(size = 9, family= 'Times New Roman'),
axis.title.x = element_text(size=9, family= 'Times New Roman'),
axis.text = element_text(size = 7.5),
panel.background = element_rect(fill = "gray96"),
panel.grid.major = element_line(colour='white' ),
axis.ticks= element_line( colour='gray85')
) +
scale_x_continuous(breaks = seq(0, 100, by = 10), limits=c(0,100)) +
scale_y_continuous(breaks = seq(1, 10, by = 1), limits=c(1,10)) +
# facet_wrap(~ variable) + , labeller =  label_value(variable, c('a','b','c','d','e','f','g','h')) +
geom_point(aes(colour = 'blue'), alpha = 0.5) +
theme(strip.text = element_text(colour = 'white'), strip.background = element_rect(fill = 'black')) +
labs(x = '% Contribution by hours of Senior Professional',
y = 'Return per Dollar Category', title=
'Senior Professional % Contribution vs Return Category')
p
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
p= ggplot(sub10 %>% filter(variable == 'pc.seniorpro', Discipline == 'Structural'), aes(x=percent.hrs, y= return.cut, colour= 'blue')) +
geom_smooth(method=loess, se=TRUE, aes(fill='blue'), alpha=.35) +
#                                 stat_summary(fun.x= mean, geom='point', shape = 2) +
#stat_summary(fun.data= mean_sdl, geom='crossbar', mult =1) +
theme(legend.position="none",
axis.text.x=element_text(angle=45,hjust=1),
text=element_text(size=12) ,
plot.title = element_text(size=12, family= 'Times New Roman', face='plain'),
axis.title.y = element_text(size = 10, family= 'Times New Roman'),
axis.title.x = element_text(size=10, family= 'Times New Roman'),
axis.text = element_text(size = 8.5),
panel.background = element_rect(fill = "gray96"),
panel.grid.major = element_line(colour='white' ),
axis.ticks= element_line( colour='gray85')
) +
scale_x_continuous(breaks = seq(0, 100, by = 10), limits=c(0,100)) +
scale_y_continuous(breaks = seq(1, 10, by = 1), limits=c(1,10)) +
# facet_wrap(~ variable) + , labeller =  label_value(variable, c('a','b','c','d','e','f','g','h')) +
geom_point(aes(colour = 'blue'), alpha = 0.5) +
theme(strip.text = element_text(colour = 'white'), strip.background = element_rect(fill = 'black')) +
labs(x = '% Contribution by hours of Senior Professional',
y = 'Return per Dollar Category', title=
'Senior Professional % Contribution vs Return Category')
p
p= ggplot(sub10 %>% filter(variable == 'pc.seniorpro', Discipline == 'Structural'), aes(x=percent.hrs, y= return.cut, colour= 'blue')) +
geom_smooth(method=loess, se=TRUE, aes(fill='blue'), alpha=.35) +
#                                 stat_summary(fun.x= mean, geom='point', shape = 2) +
#stat_summary(fun.data= mean_sdl, geom='crossbar', mult =1) +
theme(legend.position="none",
axis.text.x=element_text(angle=45,hjust=1),
text=element_text(size=12) ,
plot.title = element_text(size=13, family= 'Times New Roman', face='plain'),
axis.title.y = element_text(size = 11, family= 'Times New Roman'),
axis.title.x = element_text(size=11, family= 'Times New Roman'),
axis.text = element_text(size = 8.5),
panel.background = element_rect(fill = "gray96"),
panel.grid.major = element_line(colour='white' ),
axis.ticks= element_line( colour='gray85')
) +
scale_x_continuous(breaks = seq(0, 100, by = 10), limits=c(0,100)) +
scale_y_continuous(breaks = seq(1, 10, by = 1), limits=c(1,10)) +
# facet_wrap(~ variable) + , labeller =  label_value(variable, c('a','b','c','d','e','f','g','h')) +
geom_point(aes(colour = 'blue'), alpha = 0.5) +
theme(strip.text = element_text(colour = 'white'), strip.background = element_rect(fill = 'black')) +
labs(x = '% Contribution by hours of Senior Professional',
y = 'Return per Dollar Category', title=
'Senior Professional % Contribution vs Return Category')
p
ggsave(p,filename='senior_pro.png',path='~/OneDrive/shared files/conferences/Visualisation')
?update.packages
update.packages(lib.loc = 'C:/Progra~1/R/R-3.2.3/library',
checkBuilt=TRUE, ask=FALSE)
library('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
update.packages(lib.loc = 'C:/Progra~1/R/R-3.2.3/library',
instlib = 'C:/Progra~1/R/R-3.2.3/library',
checkBuilt=TRUE, ask=FALSE)
library('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages("ggplot2", lib = "C:/Progra~1/R/R-3.2.3/library")
library('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('tidyr', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages('tidyr', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('tidyr', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('Rcpp', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('rmarkdown',lib='C:/Progra~1/R/R-3.2.3/library')
ggplot(mpg, aes(cty, hwy)) +
geom_point()
ggplot(mpg, aes(cty, hwy)) +
geom_count()
library('ggplot2')
head(iris)
summary(iris)
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point()
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
labs(x = "petaltal length", y = 'petaltal width')
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions')
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions')
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
geom_line()
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
geom_line() +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
ggplot( data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point( aes(colour = Species)) +
geom_line(aes(colour = Species)) +
labs(x = "petaltal length", y = 'petaltal width',
title = 'Iris species petal dimensions') +
scale_colour_brewer(palette = "Greens")
head(faithfuld)
?faithfuld
??faithfuld
ggplot(faithful) +
geom_tile(aes(waiting, eruptions, fill = density))
head(faithful)
head(faithful)
str(faithful)
library('corrgram')
?mosaicplot
library('party', lib = 'C:/Progra~1/R/R-3.2.1/library')
library('party')
?cforest
table(iris$Species)
table(iris$Species) %>% class
library('magrittr')
table(iris$Species) %>% class
library('ggplot2')
head(diamonds)
diamonds2 <- diamonds %>% slice(1:300)
library('magrittr')
library('dplyr')
diamonds2 <- diamonds %>% slice(1:300)
summary(diamonds2)
summary(diamonds2)
View(diamonds2)
ggplot(data = diamonds2, aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
library('FNN')
?knn
summary(dimaonds)
summary(diamonds)
?ggplot
ggplot(data = diamonds, aes(x = carat, y = price, colour = cut)) +
geom_point()
nrow(diamonds)
?sample
diamonds2 <- diamonds %>% slice(sample(1000, 1:53940))
dim(diamonds)
dim(diamonds2)
?sample
diamonds2 <- diamonds %>% slice(sample( 1:53940, 1000))
dim(diamonds2)
ggplot(data = diamonds2, aes(x = carat, y = price, colour = cut)) +
geom_point()
ggplot(data = diamonds2, aes(x = carat, y = price, colour = clarity)) +
geom_point()
ggplot(data = diamonds2, aes(x = carat, y = price, fill = clarity)) +
geom_bar(stat = 'bin')
ggplot(data = diamonds2, aes(x = carat, fill = clarity)) +
geom_bar(stat = 'bin')
ggplot(data = diamonds2, aes(x = carat, fill = clarity)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = carat, y= price, fill = clarity)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = carat, y= price)) +
geom_boxplot()
summary(diamonds)
str(diamonds)
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter()
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = clarity, y= price, colour = clarity)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = carat, y= price, colour = clarity)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity)) +
geom_point(alpha = 0.5)
summary(diamonds)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = carat)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = cut)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = cut)) +
geom_point(alpha = 0.5) +
scale_colour_brewer(palette = "Greens")
max(diamonds$price)
diamonds %>% filter(carat < 1, cut %in% c('Premium', 'Ideal')) %>% summary
library('shiny')
runApp('~/OneDrive/shared files/Statslearningcourse/Shiny/tutorial/trial1')
runApp('~/OneDrive/shared files/Statslearningcourse/Shiny/tutorial/trial1')
head(diamonds)
ggplot(diamonds, aes(x = carat, y = price, colour = depth)) +
geom_point() +
facet_wrap(~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point() +
facet_wrap(~color)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_tile(aes(fill = color))
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_tile(aes(fill = color))
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_tile(aes(fill = price))
head(diamonds)
ggplot(diamonds, aes(x = carat, y = clarity)) +
geom_tile(aes(fill = price))
?diamonds
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_point(aes(colour = depth)) +
facet_wrap(~color) +
geom_smooth()
temp <- c(11, 18, 15, 25, 16, 12, 32, 24,28,14)
mean(temp)
sd(temp)
order(temp)
sort(temp)
sd(temp)
(11-19.5)^2
x = temp - 19.5
x
x^2
18-19.5^2
18-19.5
-15^2
-1.5^2
sum(x^2)
temp <-sort(temp)
x = temp - 19.5
x
x^2
18-19.5
-1.5^2
sd(temp)
temp
temp <- c(11, 18, 15, 25, 16, 12, 82, 24,28,14)
mean(temp)
temp <-sort(temp)
setwd("~/OneDrive/shared files/honours_course/trees")
install.packages('rpart')
install.packages('rpart.plot')
install.packages('ggplot2')
install.packages('GGally')
install.packages("GGally")
install.packages("GGally")
library('rpart', lib = 'C:/Progra~1/R/R-3.2.2/library')
library('rpart')
library('rpart.plot')
library('ggplot2')
library('GGally')
library('magrittr')
library('dplyr')
a<- read.csv('C:/Users/n9232371/OneDrive/shared files/honours_course/trees/adult.csv')[,-1]
a<- read.csv('~/OneDrive/shared files/honours_course/trees/adult.csv')[,-1]
summary(a)
head(a)
ggplot(a, aes(x=class, y=age)) + geom_boxplot()
boxplot(age~class, a)
ggplot(a, aes(x=class, y=age)) + geom_boxplot()
ggpairs(a, columns=c(10,9))
ggplot(a, aes(x=relationship)) + geom_density()
a<- a[,-1]
fit<- rpart(class~., data=a)
fit
printcp(fit)
plotcp(fit)
plot(fit, margin=0.05, uniform = T)
text(fit, use.n=T, cex=0.7)
fit<- rpart(class~., data=train, control = rpart.control(cp=0.00118178     ))
fit<- rpart(class~., data=a, control = rpart.control(cp=0.00118178     ))
plot(fit, margin=0.05, uniform = T)
text(fit, use.n=T, cex=0.7)
library('devtools')
install_github("coolbutuseless/BrisbaneBikeways"))
install_github("coolbutuseless/BrisbaneBikeways")
=======
cfor.plotsave(extra=list('pc.majpos'), name='varf')
summary(all7c$Business)
levels(all7c$Business) %>% length
?rainbow
rainbow(10)
mean(.4709, .4353, .4541, .4553, .4394, .4579, .3972)
sd(.4709, .4353, .4541, .4553, .4394, .4579, .3972)
sd(c(.4709, .4353, .4541, .4553, .4394, .4579, .3972))
mean(.4709, .4541, .4553, .4394, .4579, .3972)
sd(c(.4709, .4541, .4553, .4394, .4579, .3972))
>>>>>>> origin/master
>>>>>>> origin/master
