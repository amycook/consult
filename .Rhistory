df[,predict] %>% head
df[new.cases,predict]
df$pc.pro %>% head
df[new.cases,predict]
?knn
invo.knn = knn(df[,predict], df[new.cases,predict],
df$pc.pro, k=k)
head(invo.knn)
indices<- attr(invo.knn,  "nn.index")
indices
df %>% slice(c(new.cases, indices[1,]))
indices[1,]
indicies
omdoces
indices
vars.vec<- c('Discipline','Business','Biz.type','code.contact', 'code.client', 'JD.Second', 'Billing.Type')
vars= vars.vec
df= all7d
options("contrasts")
bin.knn= NULL
i=1
temp = data.frame(df[, vars[i]])
head(temp)
colnames(temp)<- c(vars[i])
head(temp)
formula = paste('~',vars[i],'-1')
formula
a= model.matrix( as.formula(formula), temp)
head(a)
a= a[match(rownames(temp), rownames(a)),]
a= model.matrix( as.formula(formula), temp)
head(a)
head(temp)
bin.knn= cbind(bin.knn,a)
head(bin.knn)
shiny::runApp('final_app')
head(e())
head(e)
e
head(test)
head(c)
head(c())
k1
head(k1)
knn.binary<- binary.build(vars= vars.vec, df= all7d)
binary.build<- function(vars= vars.vec, df= all7d){
options("contrasts")
#create final df bin.knn
bin.knn= NULL
#loop through each variable in vars vector
for(i in 1:length(vars.vec)){
temp = data.frame(df[, vars[i]])
colnames(temp)<- c(vars[i])
formula = paste('~',vars[i],'-1')
a= model.matrix( as.formula(formula), temp)
a= a[match(rownames(temp), rownames(a)),]
bin.knn= cbind(bin.knn,a)
}
return(bin.knn)
}
knn.binary<- binary.build(vars= vars.vec, df= all7d)
knn.binary<- as.data.frame(knn.binary)
#NA values don't work in knn function so turn all NA into zeroes
knn.binary[is.na(knn.binary)]<- 0
knn.binary$pc.pro<- all7d$pc.pro
knn.binary$mlsto<- all7d$mlsto
bin<- knn.binary %>% select(-mlsto)
head(knn.binary)
knn.binary$mlsto<- all7d$mlsto
bin<- knn.binary %>% select(-mlsto)
head(all7d$mlsto)
all7d<- read.csv('all7d.csv')[,-1]
all7d<- read.csv('C:/Users/n9232371/OneDrive/shared files/Bligh Tanner/masters/data/all7d.csv')[,-1]
all7d$mlsto<- as.character(all7d$mlsto)
# test.case<- all7d %>% select(Discipline, Business, Biz.type, code.contact, code.client, JD.Second, Billing.Type)
#function for retrieving nearest neighbours by inv.mlsto:
inv.knn<- function(df= all7d, predict= 'inv.mlsto', new.cases= c(1000), k=3){
invo.knn = knn(df[,predict], df[new.cases,predict],
df$pc.pro, k=k)
indices<- attr(invo.knn,  "nn.index")
#checkout the nearest neigbours!
df %>% slice(c(new.cases, indices[1,])) %>% return
}
vars.vec<- c('Discipline','Business','Biz.type','code.contact', 'code.client', 'JD.Second', 'Billing.Type')
knn.binary<- binary.build(vars= vars.vec, df= all7d)
knn.binary<- as.data.frame(knn.binary)
#NA values don't work in knn function so turn all NA into zeroes
knn.binary[is.na(knn.binary)]<- 0
knn.binary$pc.pro<- all7d$pc.pro
knn.binary$mlsto<- all7d$mlsto
bin<- knn.binary %>% select(-mlsto)
cat.knn<- function(df= all7d, nn.by= 'inv.mlsto', predict='pc.pro', case= c(1000), k=3, result.df= all7d){
invo.knn = knn(df[,nn.by], df[case,nn.by],
df[,predict], k=k)
indices= attr(invo.knn,  "nn.index")
dists= attr(invo.knn, 'nn.dist') %>% t %>% as.data.frame %>% round(2)
#checkout the nearest neigbours!
final = cbind(result.df %>% slice(c(indices[1,])), dists)
colnames(final)[names(final) %in% 'V1']<-'knn.dist'
#final actions
assign('index', indices, envir=.GlobalEnv)
return(final)
}
head(bin)
b = cat.knn(df= bin, nn.by= colnames(bin)[!grepl('pc.pro', colnames(bin))],
predict = 'pc.pro', case= input$case, k=10, result.df= all7d)
b = cat.knn(df= bin, nn.by= colnames(bin)[!grepl('pc.pro', colnames(bin))],
predict = 'pc.pro', case= 80, k=10, result.df= all7d)
head(b)
inv.knn(df= b, predict= 'inv.mlsto', new.cases= 1, k=5) %>% slice(-1)
c = inv.knn(df= b, predict= 'inv.mlsto', new.cases= 1, k=5) %>% slice(-1)
head(c)
ggplot(b, aes_string(x = 'return.pdol', y = 'inv.mlsto')) +
geom_point(aes_string(size = 'timespan', colour = 'code.client'))
ggplot(b, aes_string(x = 'inv.mlsto', y = 'return.pdol')) +
geom_point(aes_string(size = 'timespan', colour = 'code.client'))
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'))
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", x = "Return per Dollar", y = "Timespan (days)")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount")
shiny::runApp('final_app')
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE)
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.05)
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.1)
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04)
shiny::runApp('final_app')
shiny::runApp('final_app')
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Spectral")
b
b$code.client <- c('a','b','c','d','e','f','g','h','i','j','l')
b$code.client <- c('a','b','c','d','e','f','g','h','i','j','l','m')
b$code.client <- c('a','b','c','d','e','f','g','h','i','j')
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Spectral")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Set 1")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Set1")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Set3")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Accent")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Paired")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client')) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Accent")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'), alpha = 0.6) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Accent")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.6, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Accent")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.6, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Spectral")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.7, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Spectral")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.7, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Set3")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.7, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Set2")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.7, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Paired")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.7, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Accent")
ggplot(b, aes_string(x = 'timespan', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.7, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Timespan (days)",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Set1")
shiny::runApp('final_app')
shiny::runApp('final_app')
head(b)
shiny::runApp('final_app')
ggplot(b, aes_string(x = 'no.users', y = 'return.pdol')) +
geom_point(aes_string(size = 'inv.mlsto', colour = 'code.client'),
alpha = 0.6, shape = 16) +
labs(title = "Similar Jobs", y = "Return per Dollar", x = "Number of Users",
colour = "Client", size = "Invoiced Amount ($)") +
geom_text(aes(label = mlsto), check_overlap = TRUE, hjust = 0, nudge_x = 0.1,
nudge_y = -0.04) +
scale_colour_brewer(palette = "Set1") +
ylim(-1, NA)
shiny::runApp('final_app')
shiny::runApp('final_app')
library('shiny',lib='C:/Progra~1/R/R-3.2.2/library')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.2/library')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
head(b)
shiny::runApp('final_app')
ggplot(b, aes_string(x = 'inv.mlsto', y = 'return.pdol')) +
geom_point(aes_string(size = 'pc.majpos', colour = 'code.client'),
alpha = 0.6, shape = 16) +
scale_size(range = c(2,4))
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
ggplot(b, aes_string(x = 'inv.mlsto', y = 'return.pdol')) +
geom_point(aes_string(size = 'timespan', colour = 'code.client'),
alpha = 0.6, shape = 16) +
scale_size(range = c(0,10))
ggplot(b, aes_string(x = 'inv.mlsto', y = 'return.pdol')) +
geom_point(aes_string(size = 'timespan', colour = 'code.client'),
alpha = 0.6, shape = 16) +
scale_size(range = c(5,10))
ggplot(b, aes_string(x = 'inv.mlsto', y = 'return.pdol')) +
geom_point(aes_string(size = 'timespan', colour = 'code.client'),
alpha = 0.6, shape = 16) +
scale_size(range = c(5,13))
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
install.packages('shiny',lib='C:/Progra~1/R/R-3.2.2/library')
install.packages("shiny", lib = "C:/Progra~1/R/R-3.2.2/library")
install.packages('shiny',lib='C:/Progra~1/R/R-3.2.3/library')
install.packages("shiny", lib = "C:/Progra~1/R/R-3.2.3/library")
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
library('shiny',lib='C:/Progra~1/R/R-3.2.3/library')
install.packages('shiny',lib='C:/Progra~1/R/R-3.2.3/library')
library('shiny',lib='C:/Progra~1/R/R-3.2.3/library')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
library('ggplot2', lib = 'C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
c(5,13)
c(5,13) %>% class
ggplot(e(), aes(x = inv.mlsto, y = return.pdol, size = timespan)) +
geom_point() +
scale_size(range = c(5,13))
ggplot(b, aes(x = inv.mlsto, y = return.pdol, size = timespan)) +
geom_point() +
scale_size(range = c(5,13))
shiny::runApp('final_app')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
library("plyr",lib = 'C:/Progra~1/R/R-3.2.3/library')
library("dplyr",lib = 'C:/Progra~1/R/R-3.2.3/library')
library('magrittr',lib='C:/Progra~1/R/R-3.2.3/library')
library('reshape2',lib='C:/Progra~1/R/R-3.2.3/library')
library('ggplot2',lib='C:/Progra~1/R/R-3.2.3/library')
library('gbm', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('randomForest', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('caret', lib = 'C:/Progra~1/R/R-3.2.3/library')
library('pROC',lib='C:/Progra~1/R/R-3.2.3/library')
all7d <- read.csv('C:/Users/n9232371/Documents/Consultbusiness/data/all7d.csv')
all10mice<- read.csv('C:/Users/n9232371/Documents/Consultbusiness/data/all10mice.csv')[,-1]
df.string = "all10mice"
method = "boost"
seed = 300
all10full = NULL
df = get(df.string)
set.seed(seed)
# create f.rpdol
df$f.rpdol <- as.factor(df$b.rpdol)
levels(df$f.rpdol)[levels(df$f.rpdol) == "0"] <-"profit"
levels(df$f.rpdol)[levels(df$f.rpdol) == "1"] <-"loss"
k.folds = 1
folds <- createFolds(df$f.rpdol, k = k.folds, list = T, returnTrain = F)
head(folds)
str(folds)
method %in% 'boost'
formula = "b.rpdol ~ Discipline + pc.pro + b.timespan.cbrt + no.users + inv.mlsto.log + client.totinv.log + Business + majority.pos + pc.majpos.log"
length(folds)
test<- df[folds[[j]],]
j=1
test<- df[folds[[j]],]
levels(test$f.rpdol) <- c('profit', 'loss')
test$f.rpdol <- ordered(test$f.rpdol)
fit <- gbm(as.formula(formula), data = df[-folds[[j]],],
distribution = "bernoulli", n.trees = 10000,
shrinkage = 0.001, interaction.depth = 4,
n.minobsinnode = 20)
df[-folds[[j]],]
head(df)
fit <- gbm(as.formula(formula), data = df, #[-folds[[j]],],
distribution = "bernoulli", n.trees = 10000,
shrinkage = 0.001, interaction.depth = 4,
n.minobsinnode = 20)
i=1
i=1
a<- plot.gbm(fit, i, type="response")
a
i=1
a<- plot.gbm(fit, i, type="response")
fit$var.names
i=3
a<- plot.gbm(fit, i, type="response")
levels(all10mice$b.timespan.cbrt)
levels(df$b.timespan.cbrt) <- c('1d-3wk', '3wk-2.5m','2.5m-9m','9m-1.5y','1.5y-3y','>3y')
levels(all10mice$b.timespan.cbrt)
levels(df$b.timespan.cbrt) <- c('1d-3wk', '3wk-2.5m','2.5m-9m','9m-1.5y','1.5y-3y','>3y')
df$b.timespan.cbrt <- ordered(df$b.timespan.cbrt)
levels(all10mice$b.timespan.cbrt)
df <- within(df, b.timespan.cbrt <- factor(b.timespan.cbrt,
levels=c('1d-3wk', '3wk-2.5m','2.5m-9m','9m-1.5y','1.5y-3y','>3y')))
levels(all10mice$b.timespan.cbrt)
levels(df$b.timespan.cbrt)
levels(df$no.users)
levels(df$majority.pos)
shiny::runApp('final_app')
df$inv.mlsto.log
df$inv.mlsto.log %>% levels
df$pc.pro %>% levels
df$pc.pro %>% head
df$majority.pos %>% head
df <- within(df, majority.pos <- factor(majority.pos,
levels=c('contracttech', 'midtech','seniortech','gradpro',
'midpro','seniorpro','director')))
levels(df$majority.pos)
fit <- gbm(as.formula(formula), data = df, #[-folds[[j]],],
distribution = "bernoulli", n.trees = 10000,
shrinkage = 0.001, interaction.depth = 4,
n.minobsinnode = 20)
i=3
a<- plot.gbm(fit, i, type="response")
a
fit$var.names
i=2
a<- plot.gbm(fit, i, type="response")
i=4
a<- plot.gbm(fit, i, type="response")
i=5
a<- plot.gbm(fit, i, type="response")
log(6)
e^6
exp(6)
exp(8)
exp(10)
exp(12)
exp(14)
shiny::runApp('final_app')
shiny::runApp('final_app')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
df2
df
shiny::runApp('final_app')
df[1,]
shiny::runApp('final_app')
shiny::runApp('final_app')
?GBM
??gbm
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
rep(0.3,11)
seq(0,100, by = 10)
shiny::runApp('final_app')
shiny::runApp('final_app')
seq(0,100, by = 2.5)
seq(0,100, by = 1)
length(seq(0,100, by = 10))
length(seq(0,100, by = 1))
shiny::runApp('final_app')
df2
df2<- data.frame(id=c(rep("Sp1",1)), ymin= c(63),
ymax=c(79), confidence=c('90%'))
df2 <- within(df2,
confidence <- factor(confidence,
levels=c('90%')))
df2
df2<- data.frame(id=c(rep("Sp1",1)), ymin= c(63), y.mean = c(71)
ymax=c(79), confidence=c('90%'))
df2<- data.frame(id=c(rep("Sp1",1)), ymin= c(63), y.mean = c(71),
ymax=c(79), confidence=c('90%'))
df2 <- within(df2,
confidence <- factor(confidence,
levels=c('90%')))
df2
shiny::runApp('final_app')
shiny::runApp('final_app')
df2
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
install.packages('trelliscope', lib = 'C:/Progra~1/R/R-3.2.3/library')
install.packages('datadr', lib = 'C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
shiny::runApp('final_app')
shiny::runApp('final_app')
library('shinythemes',lib='C:/Progra~1/R/R-3.2.3/library')
shiny::runApp('final_app')
