ggplot(data = diamonds2, aes(x = carat, y = price, fill = clarity)) +
geom_bar(stat = 'bin')
ggplot(data = diamonds2, aes(x = carat, fill = clarity)) +
geom_bar(stat = 'bin')
ggplot(data = diamonds2, aes(x = carat, fill = clarity)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = carat, y= price, fill = clarity)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = carat, y= price)) +
geom_boxplot()
summary(diamonds)
str(diamonds)
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot()
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter()
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = clarity, y= price)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = clarity, y= price, colour = clarity)) +
geom_boxplot() +
geom_jitter(alpha = 0.3)
ggplot(data = diamonds2, aes(x = carat, y= price, colour = clarity)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity)) +
geom_point(alpha = 0.5)
summary(diamonds)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = carat)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = cut)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, aes(x = carat, y= price, colour = clarity, size = cut)) +
geom_point(alpha = 0.5) +
scale_colour_brewer(palette = "Greens")
max(diamonds$price)
diamonds %>% filter(carat < 1, cut %in% c('Premium', 'Ideal')) %>% summary
library('shiny')
runApp('~/OneDrive/shared files/Statslearningcourse/Shiny/tutorial/trial1')
runApp('~/OneDrive/shared files/Statslearningcourse/Shiny/tutorial/trial1')
head(diamonds)
ggplot(diamonds, aes(x = carat, y = price, colour = depth)) +
geom_point() +
facet_wrap(~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point() +
facet_wrap(~color)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_tile(aes(fill = color))
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_tile(aes(fill = color))
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_tile(aes(fill = price))
head(diamonds)
ggplot(diamonds, aes(x = carat, y = clarity)) +
geom_tile(aes(fill = price))
?diamonds
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_point(aes(colour = depth)) +
facet_wrap(~color) +
geom_smooth()
temp <- c(11, 18, 15, 25, 16, 12, 32, 24,28,14)
mean(temp)
sd(temp)
order(temp)
sort(temp)
sd(temp)
(11-19.5)^2
x = temp - 19.5
x
x^2
18-19.5^2
18-19.5
-15^2
-1.5^2
sum(x^2)
temp <-sort(temp)
x = temp - 19.5
x
x^2
18-19.5
-1.5^2
sd(temp)
temp
temp <- c(11, 18, 15, 25, 16, 12, 82, 24,28,14)
mean(temp)
temp <-sort(temp)
setwd("~/OneDrive/shared files/honours_course/trees")
install.packages('rpart')
install.packages('rpart.plot')
install.packages('ggplot2')
install.packages('GGally')
install.packages("GGally")
install.packages("GGally")
library('rpart', lib = 'C:/Progra~1/R/R-3.2.2/library')
library('rpart')
library('rpart.plot')
library('ggplot2')
library('GGally')
library('magrittr')
library('dplyr')
a<- read.csv('C:/Users/n9232371/OneDrive/shared files/honours_course/trees/adult.csv')[,-1]
a<- read.csv('~/OneDrive/shared files/honours_course/trees/adult.csv')[,-1]
summary(a)
head(a)
ggplot(a, aes(x=class, y=age)) + geom_boxplot()
boxplot(age~class, a)
ggplot(a, aes(x=class, y=age)) + geom_boxplot()
ggpairs(a, columns=c(10,9))
ggplot(a, aes(x=relationship)) + geom_density()
a<- a[,-1]
fit<- rpart(class~., data=a)
fit
printcp(fit)
plotcp(fit)
plot(fit, margin=0.05, uniform = T)
text(fit, use.n=T, cex=0.7)
fit<- rpart(class~., data=train, control = rpart.control(cp=0.00118178     ))
fit<- rpart(class~., data=a, control = rpart.control(cp=0.00118178     ))
plot(fit, margin=0.05, uniform = T)
text(fit, use.n=T, cex=0.7)
library('devtools')
install_github("coolbutuseless/BrisbaneBikeways"))
install_github("coolbutuseless/BrisbaneBikeways")
=======
cfor.plotsave(extra=list('pc.majpos'), name='varf')
summary(all7c$Business)
levels(all7c$Business) %>% length
?rainbow
rainbow(10)
mean(.4709, .4353, .4541, .4553, .4394, .4579, .3972)
sd(.4709, .4353, .4541, .4553, .4394, .4579, .3972)
sd(c(.4709, .4353, .4541, .4553, .4394, .4579, .3972))
mean(.4709, .4541, .4553, .4394, .4579, .3972)
sd(c(.4709, .4541, .4553, .4394, .4579, .3972))
>>>>>>> origin/master
results.core %>% ggplot(., aes(x =diff)) + geom_histogram()
library(magrittr)
library(ggplot2)
.Platform
.Platform$OS.type
setwd("~/Documents/github/consult/finalwriteup/report_data")
cfor.varimp = readRDS("cfor_varimp.rds")
results.core = readRDS("reg_lm_core.rds")
results.core %>% ggplot(., aes(x =diff)) + geom_histogram()
results.core %>% ggplot(., aes(x =diff)) + geom_density()
results.core %>% ggplot(., aes(x =diff, y = ..density..)) + geom_density() + geom_histogram()
results.core %>% ggplot(., aes(x =diff, y = ..density..))+ geom_histogram() + geom_density()
results.core %>% ggplot(., aes(x =diff, y = ..density..))+ geom_histogram() + geom_density() +
labs(x = "Difference in RMSE (Mean RMSE - Model RMSE)", title = "Density Plot of change in RMSE for ANOVA models")
t.test(results.core$diff, alternative = "greater", mu = 0)$p.value
t.test(results.core$diff, alternative = "greater", mu = 0)$p.value %>% round(2)
?scipen
t.test(results.core$diff, alternative = "greater", mu = 0)$p.value %>% format(nsmall = 2)
t.test(results.core$diff, alternative = "greater", mu = 0)$p.value %>% format(digits = 2)
t.test(results.core$diff, alternative = "greater", mu = 0)$p.value %>% format(digits = 3)
mean(results.core$diff)
mean(results.core$diff) %>% format(digits = 2)
mean(results.core$diff) %>% format(digits = 1)
head(results.core)
mean(results.core$final.RMSE) %>% format(digits = 2)
results.A2 = readRDS("reg_lm.rds")
#plot histogram to show differences
results.A2 %>% ggplot(., aes(x =diff, y = ..density..))+ geom_histogram() + geom_density() +
labs(x = "Difference in RMSE (Mean RMSE - Model RMSE)", title = "Density Plot of change in RMSE for 50 ANOVA models - all variables sampled")
head(results.A2)
results.A2 <- filter(results.A2, diff>-15)
str(results.A2)
results.A2 <- dplyr::filter(results.A2, diff>-15)
results.A2
results.A2 %>% ggplot(., aes(x =diff, y = ..density..))+ geom_histogram() + geom_density() +
labs(x = "Difference in RMSE (Mean RMSE - Model RMSE)", title = "Density Plot of change in RMSE for 50 ANOVA models - all variables sampled")
t.test(results.A2$diff, alternative = "greater", mu = 0)$p.value %>% format(digits = 2)
t.test(results.A2$diff, alternative = "greater", mu = 0)$p.value %>% format(digits = 3)
t.test(results.A2$diff, alternative = "greater", mu = 0)$p.value
head(results.core)
heaed(results.A2)
head(results.A2)
mean(results.A2$test.nrow)
results.A2 %>% filter(test.nrow == 591)
mean(results.A2$test.nrow)*4 %>% format(digits = 3)
mean(results.A2$test.nrow)*4
mean(results.A2$test.nrow)*4 %>% round(0)
(mean(results.A2$test.nrow)*4) %>% round(0)
591*4
library(randomForest)
final.rf.output<- function(df=all8a, no.tests = 50, core = TRUE) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
for(i in 1:no.tests){
if(core == FALSE){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
} else{
variables = c('inv.mlsto.log', 'Discipline', 'timespan.cbrt',
'no.users', 'pc.pro', 'Business')
}
#make reduced dataset with complete cases for all variables we want to use
reduced = df[complete.cases(df[,variables]),]
if('code.client' %in% variables){
sample = factor(sample(unique(reduced$code.client),size=53,
replace=FALSE))
reduced= reduced[reduced$code.client %in% sample,]
reduced$code.client= factor(reduced$code.client)
}
if('code.contact' %in% variables){
sample1 = factor(sample(unique(reduced$code.contact),size=53,
replace=FALSE))
reduced= reduced[reduced$code.contact %in% sample1,]
reduced$code.contact= factor(reduced$code.contact)
}
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% vars){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = randomForest(as.formula(formula), data= train.df, mtry=5,ntree=500, importance=FALSE)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
summary.tests[i,3]= nrow(test.df)
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE', 'test.nrow')
return(summary.tests)
}
RMSE<- function(answer, guess){
error= answer-guess
root.error= sqrt(mean(error^2))
return(root.error)
}
all8a <- read.csv("~/OneDrive/shared files/Bligh Tanner/masters/data")
all8a <- read.csv("~/OneDrive/shared files/Bligh Tanner/masters/data/all8a.csv")
results.core = final.output(df=all8a, no.tests = 50, core = TRUE)
results.core = final.rf.output(df=all8a, no.tests = 50, core = TRUE)
df=all8a
no.tests = 50
core = TRUE
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
summary.tests
final.rf.output<- function(df=all8a, no.tests = 50, core = TRUE) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
for(i in 1:no.tests){
if(core == FALSE){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
} else{
variables = c('inv.mlsto.log', 'Discipline', 'timespan.cbrt',
'no.users', 'pc.pro', 'Business')
}
#make reduced dataset with complete cases for all variables we want to use
reduced = df[complete.cases(df[,variables]),]
if('code.client' %in% variables){
sample = factor(sample(unique(reduced$code.client),size=53,
replace=FALSE))
reduced= reduced[reduced$code.client %in% sample,]
reduced$code.client= factor(reduced$code.client)
}
if('code.contact' %in% variables){
sample1 = factor(sample(unique(reduced$code.contact),size=53,
replace=FALSE))
reduced= reduced[reduced$code.contact %in% sample1,]
reduced$code.contact= factor(reduced$code.contact)
}
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% variables){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = randomForest(as.formula(formula), data= train.df, mtry=5,ntree=500, importance=FALSE)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
summary.tests[i,3]= nrow(test.df)
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE', 'test.nrow')
return(summary.tests)
}
results.core = final.rf.output(df=all8a, no.tests = 50, core = TRUE)
final.rf.output<- function(df=all8a, no.tests = 50, core = TRUE) {
summary.tests = matrix(NA, nrow = no.tests, ncol = 3)
for(i in 1:no.tests){
if(core == FALSE){
samp = sample.int(nrow(df), 1)
#create sample df - use all variables that are complete from a sample row of data
sample = df[samp,]
sample = sample[,!is.na(sample)]
vars= names(sample)
vars = vars[! vars %in% c('mlsto','Year','return.pdol')]
variables = vars
} else{
variables = c('inv.mlsto.log', 'Discipline', 'timespan.cbrt',
'no.users', 'pc.pro', 'Business')
}
#make reduced dataset with complete cases for all variables we want to use
reduced = df[complete.cases(df[,variables]),]
if('code.client' %in% variables){
sample = factor(sample(unique(reduced$code.client),size=53,
replace=FALSE))
reduced= reduced[reduced$code.client %in% sample,]
reduced$code.client= factor(reduced$code.client)
}
if('code.contact' %in% variables){
sample1 = factor(sample(unique(reduced$code.contact),size=53,
replace=FALSE))
reduced= reduced[reduced$code.contact %in% sample1,]
reduced$code.contact= factor(reduced$code.contact)
}
formula = paste("return.pdol ~ ")
for(j in 1:length(variables)){
formula = paste(formula, variables[j], sep= " + ")
}
samp_size = floor(0.75*nrow(reduced))
create.train = base::sample.int(nrow(reduced), samp_size)
train.df = reduced[create.train,]
test.df = reduced[-create.train,]
cats = c('code.client', 'code.contact', 'JD.Second', 'Business', 'majority.pos')
for(k in seq_along(cats)){
if(cats[k] %in% variables){
test.df = test.df[test.df[,cats[k]] %in% unique(train.df[,cats[k]]),]
}
}
final = randomForest(as.formula(formula), data= train.df, mtry=5,ntree=500, importance=FALSE)
ans = data.frame(answer= test.df$return.pdol, final.lm = predict(final, test.df))
#print RMSE for cases that match certain categories only
#first subset predictions to cases that match the category
test.df$predict= ans$final.lm
#random RMSE
r= mean(reduced$return.pdol)
random.RMSE= RMSE(reduced$return.pdol, r) %>% round(3)
#final RMSE for all rows in reduced in a regression
final.RMSE= RMSE(ans$answer, ans$final.lm) %>% round(3)
summary.tests[i,1]= random.RMSE
summary.tests[i,2]= final.RMSE
summary.tests[i,3]= nrow(test.df)
#track progress
cat(i," ")
}
summary.tests = as.data.frame(summary.tests)
names(summary.tests) = c('random.RMSE', 'final.RMSE', 'test.nrow')
return(summary.tests)
}
results.core = final.rf.output(df=all8a, no.tests = 50, core = TRUE)
results.core = results.core %>% mutate(diff = random.RMSE - final.RMSE)
library(dplyr)
results.core = results.core %>% mutate(diff = random.RMSE - final.RMSE)
results.core %>% ggplot(., aes(x = test.nrow, y = final.RMSE)) + geom_point()
results %>% ggplot(., aes(x =diff)) + geom_histogram()
results.core %>% ggplot(., aes(x =diff)) + geom_histogram()
results.core %>% ggplot(., aes(x =diff, y = ..density..)) + geom_histogram() + geom_density
results.core %>% ggplot(., aes(x =diff, y = ..density..)) + geom_histogram() + geom_density()
results = final.output(df=all8a, no.tests = 100, core = FALSE)
results = final.rf.output(df=all8a, no.tests = 100, core = FALSE)
results = results %>% mutate(diff = random.RMSE - final.RMSE)
results %>% ggplot(., aes(x =diff, y = ..density..)) + geom_histogram() + geom_density()
saveRDS(results, "~/Documents/github/consult/finalwriteup/report_data/reg_rf.rds")
saveRDS(results.core, "~/Documents/github/consult/finalwriteup/report_data/reg_rf_core.rds")
citation(package = 'caret')
?toBibtex
nrow(results.core)
results.core$test.nrow[1]
results.rf.core = readRDS("reg_rf_core.rds")
results.rf.core %>% ggplot(., aes(x =diff, y = ..density..))+ geom_histogram() + geom_density() +
labs(x = "Difference in RMSE (Mean RMSE - Model RMSE)", title = "Density Plot of change in RMSE for 100 ANOVA models- core variables only")
r mean(results.core$diff) %>% format(digits = 1)
mean(results.core$diff) %>% format(digits = 1)
mean(results.core$diff) %>% format(digits = 1)
t.test(results.rf.core$diff, alternative = "greater", mu = 0)$p.value %>% format(digits = 2)
results.rf2 = readRDS("reg_rf.rds")
results.rf2 %>% ggplot(., aes(x =diff, y = ..density..))+ geom_histogram() + geom_density() +
labs(x = "Difference in RMSE (Mean RMSE - Model RMSE)", title = "Density Plot of change in RMSE for 50 ANOVA models - all variables sampled")
t.test(results.rf2$diff, alternative = "greater", mu = 0)$p.value %>% format(digits = 3)
t.test(results.rf2$diff, alternative = "greater", mu = 0)$p.value %>% format(digits = 2)
head(results.rf2)
results.rf2 %>% ggplot(., aes(x =final.RMSE, y = ..density..))+ geom_histogram() + geom_density() +
labs(x = "RMSE", title = "Density Plot of RMSE for 50 randomForest models - all variables sampled")
sd(results.rf2$final.RMSE)
mean(results.rf2$final.RMSE)
mean(results.rf2$final.RMSE) %>% round(2)
mean(results.rf.core$final.RMSE) %>% round(2)
mean(results.core$final.RMSE) %>% round(2)
mean(results.A2$final.RMSE) %>% round(2)
head(all8a)
ggplot(all8a, aes(x = return.pdol, y = ..density..)) + geom_histogram() + geom_density()
ggplot(all8a, aes(x = return.pdol, y = ..density..)) + geom_histogram() + geom_density() +
labs(x = "Return per Dollar ($)", title = "Density Plot of Return per Dollar")
ggplot(all8a, aes(x = return.pdol, y = ..density..)) + geom_histogram() + geom_density() +
labs(x = "Return per Dollar ($)", title = "Density Plot of Return per Dollar - All Projects")
?qvalue
?qstat
?qnorm
qnorm(0.975, all8a$return.pdol)
qnorm(0.975)
mean(all8a$return.pdol)
sd(all8a$return.pdol)
r mean(all8a$return.pdol) - qnorm(0.975)*sd(all8a$return.pdol)
mean(all8a$return.pdol) - qnorm(0.975)*sd(all8a$return.pdol)
(mean(all8a$return.pdol) + qnorm(0.975)*sd(all8a$return.pdol)) %>% round(2)
1.43-.65
1.43+.65
install.packages('pwr')
library('pwr')
?pwr.t.test
(results.core$diff)/sd(results.core$diff)
mean(results.core$diff)/sd(results.core$diff)
mean(results.core$diff)/(sd(results.core$diff))^2
mean(results.core$diff)/(sd(results.core$diff)^2)
sd(results.core$diff)
sd(results.core$diff)
mean(results.core$diff)
d = mean(results.core$diff)/sd(results.core$diff)
d
pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05, power = .8, type = c("one.sample"), alternative = 'greater')
d.calc = mean(results.core$diff)/sd(results.core$diff)
pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05, power = .8, type = c("one.sample"), alternative = 'greater')
pow_pow = pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05, power = .8, type = c(type.calc), alternative = alt)
data = results.core$final.RMSE
type.calc = 'one.sample'
alt = 'greater'
d.calc = mean(data)/sd(data)
pow_pow = pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05, power = .8, type = c(type.calc), alternative = alt)
d.calc
mean(data)
sd(data)
d.calc = mean(data)/sd(data)
d.calc
d.calc = mean(data)/sd(data)
d.calc
data = results.core$diff
d.calc = mean(data)/sd(data)
d.calc
pow_pow = pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05, power = .8, type = c(type.calc), alternative = alt)
pow_pow
str(pow_pow)
ceiling(pow_pow$n)
n.samples = function(data = results.core$diff, type.calc = 'one.sample', alt = 'greater'){
d.calc = mean(data)/sd(data)
pow_pow = pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05, power = .8, type = c(type.calc), alternative = alt)
return(ceiling(pow_pow$n))
}
n.samples(data = results.core$diff)
n.samples(data = results$diff)
results.core = readRDS("reg_lm_core.rds")
n.samples(data = results.core$diff)
n.samples(data = results.A2$diff)
results.A2 = readRDS("reg_lm.rds")
n.samples(data = results.A2$diff)
head(results.A2)
results.A2$diff
results.A2$diff %>% sd
n.samples = function(data = results.core$diff, type.calc = 'one.sample', alt = 'greater'){
d.calc = abs(mean(data))/sd(data)
pow_pow = pwr.t.test(n = NULL, d = d.calc , sig.level = 0.05, power = .8, type = c(type.calc), alternative = alt)
return(ceiling(pow_pow$n))
}
n.samples(data = results.A2$diff)
library('pwr')
n.samples(data = results.rf2$diff
)
citation('pwr')
